{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport { compare } from 'bcryptjs';\nimport { sign } from 'jsonwebtoken';\nimport { loginValidation } from '../../server/Validation';\nimport User from '../../server/models/User';\nexport default auth(async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  if (method === 'GET') {\n    // @route   GET api/auth\n    // @desc    Get logged in user\n    // @access  Private\n    // await auth(req, res);\n    try {\n      const user = await User.findById(req.user.id).select('-password');\n      res.json(user);\n    } catch (err) {\n      console.log(err.message);\n      res.status(500).send('Server error');\n    }\n  } else if (method === 'POST') {\n    // @route   GET api/auth\n    // @desc    Get logged in user\n    // @access  Private\n    const {\n      error\n    } = loginValidation(req.body);\n    if (error) return res.status(400).json({\n      msg: error.details[0].message\n    });\n    const {\n      email,\n      password\n    } = req.body;\n\n    try {\n      let user = await User.findOne({\n        email\n      });\n\n      if (!user) {\n        return res.status(400).json({\n          msg: 'Invalid Credentials'\n        });\n      }\n\n      const isMatch = await compare(password, user.password);\n\n      if (!isMatch) {\n        return res.status(400).json({\n          msg: 'Invalid Credentials'\n        });\n      }\n\n      const payload = {\n        user: {\n          id: user.id\n        }\n      };\n      const jwt = sign(payload, process.env.jwtSecret, {\n        expiresIn: 360000\n      });\n      res.setHeader('Set-Cookie', cookie.serialize('auth', jwt, {\n        httpOnly: true,\n        secure: false,\n        sameSite: 'strict',\n        maxAge: 3600,\n        path: '/'\n      }));\n      res.json({\n        message: 'Welcome back to the Fun!'\n      }); // const jwt =  jwt.sign(\n      //   payload,\n      //   process.env.jwtSecret,\n      //   {\n      //     expiresIn: 360000\n      //   },\n      //   (err, token) => {\n      //     if (err) throw err;\n      //     res.json({ token });\n      //   }\n      // );\n      // use json token\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/auth.js"],"names":["auth","connectDB","compare","sign","loginValidation","User","req","res","method","user","findById","id","select","json","err","console","log","message","status","send","error","body","msg","details","email","password","findOne","isMatch","payload","jwt","process","env","jwtSecret","expiresIn","setHeader","cookie","serialize","httpOnly","secure","sameSite","maxAge","path"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport { compare } from 'bcryptjs';\r\nimport { sign } from 'jsonwebtoken';\r\n\r\nimport { loginValidation } from '../../server/Validation';\r\n\r\nimport User from '../../server/models/User';\r\n\r\nexport default auth(async (req, res) => {\r\n  await connectDB();\r\n  const { method } = req;\r\n\r\n  if (method === 'GET') {\r\n    // @route   GET api/auth\r\n    // @desc    Get logged in user\r\n    // @access  Private\r\n\r\n    // await auth(req, res);\r\n\r\n    try {\r\n      const user = await User.findById(req.user.id).select('-password');\r\n      res.json(user);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  } else if (method === 'POST') {\r\n    // @route   GET api/auth\r\n    // @desc    Get logged in user\r\n    // @access  Private\r\n    const { error } = loginValidation(req.body);\r\n\r\n    if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      let user = await User.findOne({ email });\r\n\r\n      if (!user) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const isMatch = await compare(password, user.password);\r\n\r\n      if (!isMatch) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n\r\n      const jwt = sign(payload, process.env.jwtSecret, {\r\n        expiresIn: 360000,\r\n      });\r\n\r\n      res.setHeader(\r\n        'Set-Cookie',\r\n        cookie.serialize('auth', jwt, {\r\n          httpOnly: true,\r\n          secure: process.env.NODE_ENV !== 'development',\r\n          sameSite: 'strict',\r\n          maxAge: 3600,\r\n          path: '/',\r\n        })\r\n      );\r\n      res.json({ message: 'Welcome back to the Fun!' });\r\n\r\n      // const jwt =  jwt.sign(\r\n      //   payload,\r\n      //   process.env.jwtSecret,\r\n      //   {\r\n      //     expiresIn: 360000\r\n      //   },\r\n      //   (err, token) => {\r\n      //     if (err) throw err;\r\n      //     res.json({ token });\r\n      //   }\r\n      // );\r\n      // use json token\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}