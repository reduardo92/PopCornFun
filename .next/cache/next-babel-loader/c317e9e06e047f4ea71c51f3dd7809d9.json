{"ast":null,"code":"import jwt from 'jsonwebtoken';\n\nconst auth = fn => async (req, res) => {\n  // Get token from Cookies\n  const token = req.cookies.auth; // Check if not token\n\n  if (!token) {\n    return res.status(401).json({\n      msg: 'No token, authorization denied'\n    });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.jwtSecret);\n    req.user = decoded.user;\n    return await fn(req, res);\n  } catch (err) {\n    res.status(401).json({\n      msg: 'token is not valid'\n    });\n  }\n};\n\nexport default auth; // const auth = (fn) => async(req, res) => {\n//   // Get token from header\n//   const token = req.headers['x-auth-token'];\n//   // Check if not token\n//   if (!token) {\n//     return res.status(401).json({ msg: 'No token, authorization denied' });\n//   }\n//   try {\n//     const decoded = jwt.verify(token, process.env.jwtSecret);\n//     req.user = decoded.user;\n//     return await fn(req, res);\n//   } catch (err) {\n//     res.status(401).json({ msg: 'token is not valid' });\n//   }\n// };\n// export default auth;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/server/middleware/auth.js"],"names":["jwt","auth","fn","req","res","token","cookies","status","json","msg","decoded","verify","process","env","jwtSecret","user","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,IAAI,GAAIC,EAAD,IAAQ,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvC;AACA,QAAMC,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYL,IAA1B,CAFuC,CAIvC;;AACA,MAAI,CAACI,KAAL,EAAY;AACV,WAAOD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAMC,OAAO,GAAGV,GAAG,CAACW,MAAJ,CAAWN,KAAX,EAAkBO,OAAO,CAACC,GAAR,CAAYC,SAA9B,CAAhB;AACAX,IAAAA,GAAG,CAACY,IAAJ,GAAWL,OAAO,CAACK,IAAnB;AACA,WAAO,MAAMb,EAAE,CAACC,GAAD,EAAMC,GAAN,CAAf;AACD,GAJD,CAIE,OAAOY,GAAP,EAAY;AACZZ,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB;AACD;AACF,CAhBD;;AAiBA,eAAeR,IAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst auth = (fn) => async (req, res) => {\r\n  // Get token from Cookies\r\n  const token = req.cookies.auth;\r\n\r\n  // Check if not token\r\n  if (!token) {\r\n    return res.status(401).json({ msg: 'No token, authorization denied' });\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.jwtSecret);\r\n    req.user = decoded.user;\r\n    return await fn(req, res);\r\n  } catch (err) {\r\n    res.status(401).json({ msg: 'token is not valid' });\r\n  }\r\n};\r\nexport default auth;\r\n\r\n// const auth = (fn) => async(req, res) => {\r\n//   // Get token from header\r\n//   const token = req.headers['x-auth-token'];\r\n\r\n//   // Check if not token\r\n//   if (!token) {\r\n//     return res.status(401).json({ msg: 'No token, authorization denied' });\r\n//   }\r\n\r\n//   try {\r\n//     const decoded = jwt.verify(token, process.env.jwtSecret);\r\n//     req.user = decoded.user;\r\n//     return await fn(req, res);\r\n\r\n//   } catch (err) {\r\n//     res.status(401).json({ msg: 'token is not valid' });\r\n//   }\r\n// };\r\n// export default auth;\r\n"]},"metadata":{},"sourceType":"module"}