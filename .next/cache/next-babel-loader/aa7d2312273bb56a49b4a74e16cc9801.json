{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport { mediaValidation } from '../../server/Validation';\nimport Favorite from '../../server/models/Favorite';\nexport default auth(async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  switch (method) {\n    // @route   GET api/favorite\n    // @desc    Get all Favorite Media\n    // @access  Private\n    case 'GET':\n      try {\n        const favorite = await Favorite.find({\n          user: req.user.id\n        }).sort({\n          date: -1\n        });\n        res.json(favorite);\n      } catch (err) {\n        console.log(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'POST':\n      // @route   POST api/favorite\n      // @desc    add new favorite\n      // @access  Private\n      const {\n        error\n      } = mediaValidation(req.body);\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const {\n        media,\n        media_id\n      } = req.body;\n\n      try {\n        let checkMedia = await Favorite.findOne({\n          media_id\n        });\n\n        if (checkMedia) {\n          return res.status(400).json({\n            msg: 'Media already added'\n          });\n        }\n\n        const newFavorite = new Favorite({\n          media,\n          user: req.user.id\n        });\n        const favorite = await newFavorite.save();\n        res.json(favorite);\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'DELETE':\n      // @route   DELETE api/favorite/:id\n      // @desc    Delete favorite\n      // @access  Private\n      try {\n        let favorite = await Favorite.findById(req.query.id);\n        if (!favorite) return res.status(400).json({\n          msg: 'Favorite not found'\n        }); // Make sure user owns favorite\n\n        if (favorite.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        await Favorite.findByIdAndRemove(req.query.id);\n        res.json({\n          msg: 'Favorite removed'\n        });\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    default:\n      console.log('defa', method, req.params);\n      return res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/favorites.js"],"names":["auth","connectDB","mediaValidation","Favorite","req","res","method","favorite","find","user","id","sort","date","json","err","console","log","message","status","send","error","body","msg","details","media","media_id","checkMedia","findOne","newFavorite","save","findById","query","toString","findByIdAndRemove","params","end"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,8BAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,eAAeH,IAAI,CAAC,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAMJ,SAAS,EAAf;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAaF,GAAnB;;AAEA,UAAQE,MAAR;AACE;AACA;AACA;AACA,SAAK,KAAL;AACE,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAT,CAAc;AAAEC,UAAAA,IAAI,EAAEL,GAAG,CAACK,IAAJ,CAASC;AAAjB,SAAd,EAAqCC,IAArC,CAA0C;AAC/DC,UAAAA,IAAI,EAAE,CAAC;AADwD,SAA1C,CAAvB;AAGAP,QAAAA,GAAG,CAACQ,IAAJ,CAASN,QAAT;AACD,OALD,CAKE,OAAOO,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;;AACD;;AACF,SAAK,MAAL;AACE;AACA;AACA;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAYlB,eAAe,CAACE,GAAG,CAACiB,IAAL,CAAjC;AACA,UAAID,KAAJ,EAAW,OAAOf,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAES,QAAAA,GAAG,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBN;AAAxB,OAArB,CAAP;AAEX,YAAM;AAAEO,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAsBrB,GAAG,CAACiB,IAAhC;;AAEA,UAAI;AACF,YAAIK,UAAU,GAAG,MAAMvB,QAAQ,CAACwB,OAAT,CAAiB;AAAEF,UAAAA;AAAF,SAAjB,CAAvB;;AAEA,YAAIC,UAAJ,EAAgB;AACd,iBAAOrB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAES,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AACD;;AAED,cAAMM,WAAW,GAAG,IAAIzB,QAAJ,CAAa;AAAEqB,UAAAA,KAAF;AAASf,UAAAA,IAAI,EAAEL,GAAG,CAACK,IAAJ,CAASC;AAAxB,SAAb,CAApB;AAEA,cAAMH,QAAQ,GAAG,MAAMqB,WAAW,CAACC,IAAZ,EAAvB;AAEAxB,QAAAA,GAAG,CAACQ,IAAJ,CAASN,QAAT;AACD,OAZD,CAYE,OAAOO,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACK,KAAR,CAAcN,GAAG,CAACG,OAAlB;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;;AACD;;AACF,SAAK,QAAL;AACE;AACA;AACA;AACA,UAAI;AACF,YAAIZ,QAAQ,GAAG,MAAMJ,QAAQ,CAAC2B,QAAT,CAAkB1B,GAAG,CAAC2B,KAAJ,CAAUrB,EAA5B,CAArB;AAEA,YAAI,CAACH,QAAL,EACE,OAAOF,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAES,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP,CAJA,CAMF;;AACA,YAAIf,QAAQ,CAACE,IAAT,CAAcuB,QAAd,OAA6B5B,GAAG,CAACK,IAAJ,CAASC,EAA1C,EAA8C;AAC5C,iBAAOL,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAAES,YAAAA,GAAG,EAAE;AAAP,WAArB,CAAP;AACD;;AAED,cAAMnB,QAAQ,CAAC8B,iBAAT,CAA2B7B,GAAG,CAAC2B,KAAJ,CAAUrB,EAArC,CAAN;AAEAL,QAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAES,UAAAA,GAAG,EAAE;AAAP,SAAT;AACD,OAdD,CAcE,OAAOR,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACK,KAAR,CAAcN,GAAG,CAACG,OAAlB;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;;AACD;;AACF;AACEJ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBV,MAApB,EAA4BF,GAAG,CAAC8B,MAAhC;AACA,aAAO7B,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBiB,GAAhB,CAAqB,UAAS7B,MAAO,cAArC,CAAP;AAnEJ;AAqED,CA1EkB,CAAnB","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport { mediaValidation } from '../../server/Validation';\r\nimport Favorite from '../../server/models/Favorite';\r\n\r\nexport default auth(async (req, res) => {\r\n  await connectDB();\r\n\r\n  const { method } = req;\r\n\r\n  switch (method) {\r\n    // @route   GET api/favorite\r\n    // @desc    Get all Favorite Media\r\n    // @access  Private\r\n    case 'GET':\r\n      try {\r\n        const favorite = await Favorite.find({ user: req.user.id }).sort({\r\n          date: -1,\r\n        });\r\n        res.json(favorite);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'POST':\r\n      // @route   POST api/favorite\r\n      // @desc    add new favorite\r\n      // @access  Private\r\n\r\n      const { error } = mediaValidation(req.body);\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const { media, media_id } = req.body;\r\n\r\n      try {\r\n        let checkMedia = await Favorite.findOne({ media_id });\r\n\r\n        if (checkMedia) {\r\n          return res.status(400).json({ msg: 'Media already added' });\r\n        }\r\n\r\n        const newFavorite = new Favorite({ media, user: req.user.id });\r\n\r\n        const favorite = await newFavorite.save();\r\n\r\n        res.json(favorite);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'DELETE':\r\n      // @route   DELETE api/favorite/:id\r\n      // @desc    Delete favorite\r\n      // @access  Private\r\n      try {\r\n        let favorite = await Favorite.findById(req.query.id);\r\n\r\n        if (!favorite)\r\n          return res.status(400).json({ msg: 'Favorite not found' });\r\n\r\n        // Make sure user owns favorite\r\n        if (favorite.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n\r\n        await Favorite.findByIdAndRemove(req.query.id);\r\n\r\n        res.json({ msg: 'Favorite removed' });\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    default:\r\n      console.log('defa', method, req.params);\r\n      return res.status(405).end(`Method ${method} Not Allowed`);\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}