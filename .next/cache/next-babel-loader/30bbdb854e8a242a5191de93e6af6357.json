{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\mediaProfile\\\\ProfileStats\\\\Facts.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport timeConvert from '../../../utility/timeConvert';\nimport numberWithCommas from '../../../utility/numberWithCommas';\nimport setDateFormat from '../../../utility/setDateFormat';\nimport { TiWorld } from 'react-icons/ti';\nimport Link from 'next/link';\nimport { IMG_URL } from '../../../context/types';\nconst Styled = styled.div.withConfig({\n  displayName: \"Facts__Styled\",\n  componentId: \"a62vcl-0\"\n})([\".stat{text-transform:capitalize;margin-bottom:0.7em;}.stat--title{font-size:0.9rem;font-weight:bold;margin-bottom:0.1em;}.release--content{display:grid;grid-row-gap:1em;& >:first-child{margin-top:0.5em;}}.release--date,.certification{display:flex;align-items:center;justify-content:start;& >:first-child{margin-right:0.5em;}}.world{font-size:1.5rem;path{color:#535353;}}.rate{border-radius:2px;background-color:var(--primary-clr);color:#fff;padding:0.15em 0.5em;font-size:0.8rem;border-radius:5px;}.network--logo{width:60px;}\"]);\n\nconst Facts = ({\n  data\n}) => {\n  const getReleaseType = {\n    1: 'Premiere',\n    2: 'Theatrical (limited)',\n    3: 'Theatrical',\n    4: 'Digital',\n    5: 'Physical',\n    6: 'Tv'\n  }; // const release = data.r\n  //   <>\n  //   </>\n\n  const networks = data.typeFor === 'tv' && data.networks.map(netWork => __jsx(Link, {\n    key: netWork.id,\n    href: \"/network/[id]\",\n    as: `/network/${netWork.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: \"network--logo\",\n    src: `${IMG_URL}${netWork.logo_path}`,\n    alt: netWork.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n  return __jsx(Styled, {\n    className: \"profile--stats--facts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Facts\"), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Status\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, data.status)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, data.release_dates ? 'Release Information' : 'Networks'), __jsx(\"ul\", {\n    className: \"release--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, networks, data.release_dates.results.filter(item => item.iso_3166_1 === 'US')[0].release_dates.map((item, i) => __jsx(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"release--date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(TiWorld, {\n    className: \"world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, setDateFormat(item.release_date.slice(0, 10)))), __jsx(\"div\", {\n    className: \"certification\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"rate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, item.certification), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, getReleaseType[item.type])))))), data.typeFor === 'tv' && __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Type\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, data.type)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Original Language\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, data.original_language)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Runtime\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, timeConvert(data.runtime || data.episode_run_time[0]))), data.typeFor === 'tv' ? null : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Budget\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, data.budget === 0 ? 'N/A' : `$${numberWithCommas(data.budget)}`)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Revenue\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, data.revenue === 0 ? 'N/A' : `$${numberWithCommas(data.revenue)}`))));\n};\n\nexport default Facts;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/mediaProfile/ProfileStats/Facts.jsx"],"names":["React","styled","timeConvert","numberWithCommas","setDateFormat","TiWorld","Link","IMG_URL","Styled","div","Facts","data","getReleaseType","networks","typeFor","map","netWork","id","logo_path","name","status","release_dates","results","filter","item","iso_3166_1","i","release_date","slice","certification","type","original_language","runtime","episode_run_time","budget","revenue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport timeConvert from '../../../utility/timeConvert';\r\nimport numberWithCommas from '../../../utility/numberWithCommas';\r\nimport setDateFormat from '../../../utility/setDateFormat';\r\nimport { TiWorld } from 'react-icons/ti';\r\nimport Link from 'next/link';\r\nimport { IMG_URL } from '../../../context/types';\r\n\r\nconst Styled = styled.div`\r\n  .stat {\r\n    text-transform: capitalize;\r\n    margin-bottom: 0.7em;\r\n  }\r\n\r\n  .stat--title {\r\n    font-size: 0.9rem;\r\n    font-weight: bold;\r\n    margin-bottom: 0.1em;\r\n  }\r\n\r\n  .release--content {\r\n    display: grid;\r\n    grid-row-gap: 1em;\r\n\r\n    & > :first-child {\r\n      margin-top: 0.5em;\r\n    }\r\n  }\r\n\r\n  .release--date,\r\n  .certification {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: start;\r\n\r\n    & > :first-child {\r\n      margin-right: 0.5em;\r\n    }\r\n  }\r\n\r\n  .world {\r\n    font-size: 1.5rem;\r\n\r\n    path {\r\n      color: #535353;\r\n    }\r\n  }\r\n\r\n  .rate {\r\n    border-radius: 2px;\r\n    background-color: var(--primary-clr);\r\n    color: #fff;\r\n    padding: 0.15em 0.5em;\r\n    font-size: 0.8rem;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  .network--logo {\r\n    width: 60px;\r\n  }\r\n`;\r\n\r\nconst Facts = ({ data }) => {\r\n  const getReleaseType = {\r\n    1: 'Premiere',\r\n    2: 'Theatrical (limited)',\r\n    3: 'Theatrical',\r\n    4: 'Digital',\r\n    5: 'Physical',\r\n    6: 'Tv'\r\n  };\r\n\r\n  // const release = data.r\r\n  //   <>\r\n\r\n  //   </>\r\n\r\n  const networks =\r\n    data.typeFor === 'tv' &&\r\n    data.networks.map(netWork => (\r\n      <Link key={netWork.id} href='/network/[id]' as={`/network/${netWork.id}`}>\r\n        <img\r\n          className='network--logo'\r\n          src={`${IMG_URL}${netWork.logo_path}`}\r\n          alt={netWork.name}\r\n        />\r\n      </Link>\r\n    ));\r\n  return (\r\n    <Styled className='profile--stats--facts'>\r\n      <h3 className='title'>Facts</h3>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Status</p>\r\n        <span className='stat--subtext'>{data.status}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>\r\n          {data.release_dates ? 'Release Information' : 'Networks'}\r\n        </p>\r\n        <ul className='release--content'>\r\n          {networks}\r\n          {data.release_dates.results\r\n            .filter(item => item.iso_3166_1 === 'US')[0]\r\n            .release_dates.map((item, i) => (\r\n              <li key={i}>\r\n                <div className='release--date'>\r\n                  <TiWorld className='world' />\r\n                  <span className='stat--subtext'>\r\n                    {setDateFormat(item.release_date.slice(0, 10))}\r\n                  </span>\r\n                </div>\r\n                <div className='certification'>\r\n                  <span className='rate'>{item.certification}</span>\r\n                  <span className='stat--subtext'>\r\n                    {getReleaseType[item.type]}\r\n                  </span>\r\n                </div>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n      {data.typeFor === 'tv' && (\r\n        <div className='stat'>\r\n          <p className='stat--title'>Type</p>\r\n          <span className='stat--subtext'>{data.type}</span>\r\n        </div>\r\n      )}\r\n      <div className='stat'>\r\n        <p className='stat--title'>Original Language</p>\r\n        <span className='stat--subtext'>{data.original_language}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Runtime</p>\r\n        <span className='stat--subtext'>\r\n          {timeConvert(data.runtime || data.episode_run_time[0])}\r\n        </span>\r\n      </div>\r\n      {data.typeFor === 'tv' ? null : (\r\n        <>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Budget</p>\r\n            <span className='stat--subtext'>\r\n              {data.budget === 0 ? 'N/A' : `$${numberWithCommas(data.budget)}`}\r\n            </span>\r\n          </div>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Revenue</p>\r\n            <span className='stat--subtext'>\r\n              {data.revenue === 0\r\n                ? 'N/A'\r\n                : `$${numberWithCommas(data.revenue)}`}\r\n            </span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Styled>\r\n  );\r\n};\r\n\r\nexport default Facts;\r\n"]},"metadata":{},"sourceType":"module"}