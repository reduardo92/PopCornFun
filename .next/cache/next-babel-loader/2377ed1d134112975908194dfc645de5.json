{"ast":null,"code":"// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nexport function runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/server/middleware/cors.js"],"names":["runMiddleware","req","res","fn","Promise","resolve","reject","result","Error"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AAC1C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD","sourcesContent":["// Helper method to wait for a middleware to execute before continuing\r\n// And to throw an error when an error happens in a middleware\r\nexport function runMiddleware(req, res, fn) {\r\n  return new Promise((resolve, reject) => {\r\n    fn(req, res, (result) => {\r\n      if (result instanceof Error) {\r\n        return reject(result);\r\n      }\r\n\r\n      return resolve(result);\r\n    });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}