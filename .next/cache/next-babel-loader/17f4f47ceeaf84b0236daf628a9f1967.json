{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db'; // import bcrypt from 'bcryptjs';\n// import jwt from 'jsonwebtoken';\n// import loginValidation from '../../server/Validation';\n\nimport User from '../../server/models/User';\nexport default (async (req, res, next) => {\n  await connectDB();\n  const use = auth(req, res, next);\n  console.log(use);\n  console.log('from req', req.user);\n  const {\n    method\n  } = req;\n\n  try {\n    if (method === 'GET') {\n      try {\n        const user = await User.findById(req.user.id).select('-password');\n        res.json(user);\n      } catch (err) {\n        console.log(err.message);\n        res.status(500).send('Server error');\n      }\n    }\n  } catch (error) {}\n}); // try {\n//     const { method } = req;\n//     switch (method) {\n//       case 'GET':\n//         break;\n//       default:\n//         res.setHeader('Allow', ['POST']);\n//         res.status(405).end(`Method ${method} Not Allowed`);\n//     }\n// @route   GET api/auth\n// @desc    Get logged in user\n// @access  Private\n// router.get('/', auth, async (req, res) => {\n//   try {\n//     const user = await User.findById(req.user.id).select('-password');\n//     res.json(user);\n//   } catch (err) {\n//     console.log(err.message);\n//     res.status(500).send('Server error');\n//   }\n// });\n// // @route   POST api/auth\n// // @desc    Auth user & get token\n// // @access  Public\n// router.post('/', async (req, res) => {\n//   const { error } = loginValidation(req.body);\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\n//   const { email, password } = req.body;\n//   try {\n//     let user = await User.findOne({ email });\n//     if (!user) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const isMatch = await bcrypt.compare(password, user.password);\n//     if (!isMatch) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const payload = {\n//       user: {\n//         id: user.id\n//       }\n//     };\n//     // use json token\n//     jwt.sign(\n//       payload,\n//       process.env.jwtSecret,\n//       {\n//         expiresIn: 360000\n//       },\n//       (err, token) => {\n//         if (err) throw err;\n//         res.json({ token });\n//       }\n//     );\n//   } catch (err) {\n//     console.error(err.message);\n//     res.status(500).send('Server Error');\n//   }\n// });","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/auth.js"],"names":["auth","connectDB","User","req","res","next","use","console","log","user","method","findById","id","select","json","err","message","status","send","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,8BAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;AACA;AAEA;;AAEA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACvC,QAAMJ,SAAS,EAAf;AACA,QAAMK,GAAG,GAAGN,IAAI,CAACG,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAhB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,GAAG,CAACM,IAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaP,GAAnB;;AAEA,MAAI;AACF,QAAIO,MAAM,KAAK,KAAf,EAAsB;AACpB,UAAI;AACF,cAAMD,IAAI,GAAG,MAAMP,IAAI,CAACS,QAAL,CAAcR,GAAG,CAACM,IAAJ,CAASG,EAAvB,EAA2BC,MAA3B,CAAkC,WAAlC,CAAnB;AACAT,QAAAA,GAAG,CAACU,IAAJ,CAASL,IAAT;AACD,OAHD,CAGE,OAAOM,GAAP,EAAY;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,OAAhB;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACD;AACF;AACF,GAVD,CAUE,OAAOC,KAAP,EAAc,CAAE;AACnB,CAlBD,E,CAoBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\n// import bcrypt from 'bcryptjs';\r\n// import jwt from 'jsonwebtoken';\r\n\r\n// import loginValidation from '../../server/Validation';\r\n\r\nimport User from '../../server/models/User';\r\n\r\nexport default async (req, res, next) => {\r\n  await connectDB();\r\n  const use = auth(req, res, next);\r\n  console.log(use);\r\n  console.log('from req', req.user);\r\n  const { method } = req;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      try {\r\n        const user = await User.findById(req.user.id).select('-password');\r\n        res.json(user);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        res.status(500).send('Server error');\r\n      }\r\n    }\r\n  } catch (error) {}\r\n};\r\n\r\n// try {\r\n//     const { method } = req;\r\n\r\n//     switch (method) {\r\n//       case 'GET':\r\n\r\n//         break;\r\n//       default:\r\n//         res.setHeader('Allow', ['POST']);\r\n//         res.status(405).end(`Method ${method} Not Allowed`);\r\n//     }\r\n\r\n// @route   GET api/auth\r\n// @desc    Get logged in user\r\n// @access  Private\r\n\r\n// router.get('/', auth, async (req, res) => {\r\n//   try {\r\n//     const user = await User.findById(req.user.id).select('-password');\r\n//     res.json(user);\r\n//   } catch (err) {\r\n//     console.log(err.message);\r\n//     res.status(500).send('Server error');\r\n//   }\r\n// });\r\n\r\n// // @route   POST api/auth\r\n// // @desc    Auth user & get token\r\n// // @access  Public\r\n\r\n// router.post('/', async (req, res) => {\r\n//   const { error } = loginValidation(req.body);\r\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n//   const { email, password } = req.body;\r\n\r\n//   try {\r\n//     let user = await User.findOne({ email });\r\n\r\n//     if (!user) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n//     if (!isMatch) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const payload = {\r\n//       user: {\r\n//         id: user.id\r\n//       }\r\n//     };\r\n\r\n//     // use json token\r\n//     jwt.sign(\r\n//       payload,\r\n//       process.env.jwtSecret,\r\n//       {\r\n//         expiresIn: 360000\r\n//       },\r\n//       (err, token) => {\r\n//         if (err) throw err;\r\n//         res.json({ token });\r\n//       }\r\n//     );\r\n//   } catch (err) {\r\n//     console.error(err.message);\r\n//     res.status(500).send('Server Error');\r\n//   }\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}