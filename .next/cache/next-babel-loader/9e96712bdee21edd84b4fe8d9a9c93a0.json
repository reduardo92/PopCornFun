{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport { RatingValidation } from '../../server/Validation';\nimport Ratings from '../../server/models/Ratings';\nexport default auth(async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  switch (method) {\n    // @route   GET api/ratings\n    // @desc    Get all Ratings Media\n    // @access  Private\n    case 'GET':\n      try {\n        const ratings = await Ratings.find({\n          user: req.user.id\n        }).sort({\n          date: -1\n        });\n        res.json(ratings);\n      } catch (err) {\n        console.log(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'POST':\n      // @route   POST api/ratings\n      // @desc    add new ratings\n      // @access  Private\n      const {\n        error\n      } = RatingValidation(req.body);\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const {\n        media\n      } = req.body;\n\n      try {\n        const newFavorite = new Ratings({\n          media,\n          user: req.user.id\n        });\n        const ratings = await newFavorite.save();\n        res.json(ratings);\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'PUT':\n      // @route   PUT api/ratings/:id\n      // @desc    Update ratings\n      // @access  Private\n      const {\n        media_id,\n        ratings\n      } = req.body; // Build ratings object\n\n      const ratingsFields = {};\n      if (media_id) weightsFields.media_id = media_id;\n      if (ratings) weightsFields.ratings = ratings;\n\n      try {\n        let ratings = await Ratings.findById(req.query.id);\n        if (!ratings) return res.status(400).json({\n          msg: 'Ratings not found'\n        }); // Make sure user owns ratings\n\n        if (ratings.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        ratings = await Ratings.findByIdAndUpdate(req.query.id, {\n          $set: ratingsFields\n        }, {\n          new: true\n        });\n        res.json(ratings);\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'DELETE':\n      // @route   DELETE api/ratings/:id\n      // @desc    Delete ratings\n      // @access  Private\n      try {\n        let ratings = await Ratings.findById(req.query.id);\n        if (!ratings) return res.status(400).json({\n          msg: 'Ratings not found'\n        }); // Make sure user owns ratings\n\n        if (ratings.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        await Ratings.findByIdAndRemove(req.query.id);\n        res.json({\n          msg: 'Ratings removed'\n        });\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    default:\n      console.log('defa', method, req.query);\n      return res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/ratings.js"],"names":["auth","connectDB","RatingValidation","Ratings","req","res","method","ratings","find","user","id","sort","date","json","err","console","log","message","status","send","error","body","msg","details","media","newFavorite","save","media_id","ratingsFields","weightsFields","findById","query","toString","findByIdAndUpdate","$set","new","findByIdAndRemove","end"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport { RatingValidation } from '../../server/Validation';\r\n\r\nimport Ratings from '../../server/models/Ratings';\r\n\r\nexport default auth(async (req, res) => {\r\n  await connectDB();\r\n\r\n  const { method } = req;\r\n\r\n  switch (method) {\r\n    // @route   GET api/ratings\r\n    // @desc    Get all Ratings Media\r\n    // @access  Private\r\n    case 'GET':\r\n      try {\r\n        const ratings = await Ratings.find({ user: req.user.id }).sort({\r\n          date: -1,\r\n        });\r\n        res.json(ratings);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'POST':\r\n      // @route   POST api/ratings\r\n      // @desc    add new ratings\r\n      // @access  Private\r\n\r\n      const { error } = RatingValidation(req.body);\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const { media } = req.body;\r\n\r\n      try {\r\n        const newFavorite = new Ratings({ media, user: req.user.id });\r\n\r\n        const ratings = await newFavorite.save();\r\n\r\n        res.json(ratings);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'PUT':\r\n      // @route   PUT api/ratings/:id\r\n      // @desc    Update ratings\r\n      // @access  Private\r\n\r\n      const { media_id, ratings } = req.body;\r\n\r\n      // Build ratings object\r\n      const ratingsFields = {};\r\n      if (media_id) weightsFields.media_id = media_id;\r\n      if (ratings) weightsFields.ratings = ratings;\r\n\r\n      try {\r\n        let ratings = await Ratings.findById(req.query.id);\r\n\r\n        if (!ratings) return res.status(400).json({ msg: 'Ratings not found' });\r\n\r\n        // Make sure user owns ratings\r\n        if (ratings.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n        ratings = await Ratings.findByIdAndUpdate(\r\n          req.query.id,\r\n          { $set: ratingsFields },\r\n          { new: true }\r\n        );\r\n\r\n        res.json(ratings);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n\r\n    case 'DELETE':\r\n      // @route   DELETE api/ratings/:id\r\n      // @desc    Delete ratings\r\n      // @access  Private\r\n      try {\r\n        let ratings = await Ratings.findById(req.query.id);\r\n\r\n        if (!ratings) return res.status(400).json({ msg: 'Ratings not found' });\r\n\r\n        // Make sure user owns ratings\r\n        if (ratings.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n\r\n        await Ratings.findByIdAndRemove(req.query.id);\r\n\r\n        res.json({ msg: 'Ratings removed' });\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    default:\r\n      console.log('defa', method, req.query);\r\n      return res.status(405).end(`Method ${method} Not Allowed`);\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}