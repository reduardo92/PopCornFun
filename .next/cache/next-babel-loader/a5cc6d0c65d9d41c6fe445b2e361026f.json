{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\n// import React, { useContext } from 'react';\n// import styled from 'styled-components';\n// import MovieContext from '../context/MovieContext';\n// import Link from 'next/link';\n// const Styled = styled.nav`\n//   .pagination {\n//     justify-content: center;\n//     flex-wrap: wrap;\n//   }\n//   .page-link {\n//     color: var(--primary-clr);\n//     font-weight: bold;\n//     /* font-family: var(--primary--fn); */\n//     border: 1px solid var(--primary--clr);\n//     cursor: pointer;\n//     &:hover,\n//     &:focus,\n//     &.active {\n//       background-color: var(--primary--clr);\n//     }\n//   }\n//   /* .pagination  */\n//   .page-item + .page-item {\n//     margin-left: 0.8em;\n//   }\n//   .page-item {\n//     padding: 0.5em 0;\n//   }\n// `;\n// const Pagination = ({ total_pages, typeFor }) => {\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\n//   const pageNumbers = [];\n//     let prev = '';\n//     let next = '';\n//   for (let i = 1; i <= total_pages; i++) {\n//     pageNumbers.push(i);\n//     }\n//   return (\n//     <Styled className='pagination-nav'>\n//       <ul className='pagination'>\n//         {pageNumbers.length === 1\n//           ? ''\n//           : pageNumbers.map(number => (\n//               <li key={number} className='page-item'>\n//                 <Link href={typeFor + number}>\n//                   <div\n//                     onClick={() => paginate(number)}\n//                     className={`page-link ${\n//                       number === currentPage ? 'active' : ''\n//                     }`}\n//                   >\n//                     {number}\n//                   </div>\n//                 </Link>\n//               </li>\n//             ))}\n//       </ul>\n//     </Styled>\n//   );\n// };\n// export default Pagination;\n\n/* Pagination Component \r\n-------------------------------------------------*/\n// Pagination.propTypes = propTypes;\nvar createPagination = function createPagination(params) {\n  var numberOfArticles = params.numberOfArticles,\n      articlesPerPage = params.articlesPerPage,\n      currentPage = params.currentPage,\n      numberOfButtons = params.numberOfButtons;\n  var numberOfPages = Math.ceil(numberOfArticles / articlesPerPage);\n  if (currentPage > numberOfPages || currentPage < 1) return {\n    pagination: [],\n    currentPage: currentPage\n  };\n  var buttons = Array(numberOfPages).fill(1).map(function (e, i) {\n    return e + i;\n  });\n  var sideButtons = numberOfButtons % 2 === 0 ? numberOfButtons / 2 : (numberOfButtons - 1) / 2;\n\n  var calculLeft = function calculLeft() {\n    var rest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return {\n      array: buttons.slice(0, currentPage - 1).reverse().slice(0, sideButtons + rest).reverse(),\n      rest: function rest() {\n        return sideButtons - this.array.length;\n      }\n    };\n  };\n\n  var calculRight = function calculRight() {\n    var rest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return {\n      array: buttons.slice(currentPage).slice(0, sideButtons + rest),\n      rest: function rest() {\n        return sideButtons - this.array.length;\n      }\n    };\n  };\n\n  var leftButtons = calculLeft(calculRight().rest()).array;\n  var rightButtons = calculRight(calculLeft().rest()).array;\n  return {\n    pagination: [].concat(_toConsumableArray(leftButtons), [currentPage], _toConsumableArray(rightButtons)),\n    currentPage: currentPage\n  };\n};\n\nexport default createPagination;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/Pagination/createPagination.js"],"names":["createPagination","params","numberOfArticles","articlesPerPage","currentPage","numberOfButtons","numberOfPages","Math","ceil","pagination","buttons","Array","fill","map","e","i","sideButtons","calculLeft","rest","array","slice","reverse","length","calculRight","leftButtons","rightButtons"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;AAGA;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM,EAAI;AAAA,MAE/BC,gBAF+B,GAM7BD,MAN6B,CAE/BC,gBAF+B;AAAA,MAG/BC,eAH+B,GAM7BF,MAN6B,CAG/BE,eAH+B;AAAA,MAI/BC,WAJ+B,GAM7BH,MAN6B,CAI/BG,WAJ+B;AAAA,MAK/BC,eAL+B,GAM7BJ,MAN6B,CAK/BI,eAL+B;AAQjC,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAL,CAAUN,gBAAgB,GAAGC,eAA7B,CAAtB;AAEA,MAAIC,WAAW,GAAGE,aAAd,IAA+BF,WAAW,GAAG,CAAjD,EACE,OAAO;AACLK,IAAAA,UAAU,EAAE,EADP;AAELL,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAKF,MAAMM,OAAO,GAAGC,KAAK,CAACL,aAAD,CAAL,CACbM,IADa,CACR,CADQ,EAEbC,GAFa,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAFS,CAAhB;AAGA,MAAMC,WAAW,GACfX,eAAe,GAAG,CAAlB,KAAwB,CAAxB,GAA4BA,eAAe,GAAG,CAA9C,GAAkD,CAACA,eAAe,GAAG,CAAnB,IAAwB,CAD5E;;AAGA,MAAMY,UAAU,GAAG,SAAbA,UAAa,GAAc;AAAA,QAAbC,IAAa,uEAAN,CAAM;AAC/B,WAAO;AACLC,MAAAA,KAAK,EAAET,OAAO,CACXU,KADI,CACE,CADF,EACKhB,WAAW,GAAG,CADnB,EAEJiB,OAFI,GAGJD,KAHI,CAGE,CAHF,EAGKJ,WAAW,GAAGE,IAHnB,EAIJG,OAJI,EADF;AAMLH,MAAAA,IAAI,EAAE,gBAAW;AACf,eAAOF,WAAW,GAAG,KAAKG,KAAL,CAAWG,MAAhC;AACD;AARI,KAAP;AAUD,GAXD;;AAaA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAc;AAAA,QAAbL,IAAa,uEAAN,CAAM;AAChC,WAAO;AACLC,MAAAA,KAAK,EAAET,OAAO,CAACU,KAAR,CAAchB,WAAd,EAA2BgB,KAA3B,CAAiC,CAAjC,EAAoCJ,WAAW,GAAGE,IAAlD,CADF;AAELA,MAAAA,IAAI,EAAE,gBAAW;AACf,eAAOF,WAAW,GAAG,KAAKG,KAAL,CAAWG,MAAhC;AACD;AAJI,KAAP;AAMD,GAPD;;AASA,MAAME,WAAW,GAAGP,UAAU,CAACM,WAAW,GAAGL,IAAd,EAAD,CAAV,CAAiCC,KAArD;AACA,MAAMM,YAAY,GAAGF,WAAW,CAACN,UAAU,GAAGC,IAAb,EAAD,CAAX,CAAiCC,KAAtD;AAEA,SAAO;AACLV,IAAAA,UAAU,+BAAMe,WAAN,IAAmBpB,WAAnB,sBAAmCqB,YAAnC,EADL;AAELrB,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID,CAnDD;;AAqDA,eAAeJ,gBAAf","sourcesContent":["// import React, { useContext } from 'react';\r\n// import styled from 'styled-components';\r\n// import MovieContext from '../context/MovieContext';\r\n// import Link from 'next/link';\r\n\r\n// const Styled = styled.nav`\r\n//   .pagination {\r\n//     justify-content: center;\r\n//     flex-wrap: wrap;\r\n//   }\r\n\r\n//   .page-link {\r\n//     color: var(--primary-clr);\r\n//     font-weight: bold;\r\n//     /* font-family: var(--primary--fn); */\r\n//     border: 1px solid var(--primary--clr);\r\n//     cursor: pointer;\r\n//     &:hover,\r\n//     &:focus,\r\n//     &.active {\r\n//       background-color: var(--primary--clr);\r\n//     }\r\n//   }\r\n\r\n//   /* .pagination  */\r\n\r\n//   .page-item + .page-item {\r\n//     margin-left: 0.8em;\r\n//   }\r\n\r\n//   .page-item {\r\n//     padding: 0.5em 0;\r\n//   }\r\n// `;\r\n\r\n// const Pagination = ({ total_pages, typeFor }) => {\r\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\r\n\r\n//   const pageNumbers = [];\r\n\r\n//     let prev = '';\r\n\r\n//     let next = '';\r\n\r\n//   for (let i = 1; i <= total_pages; i++) {\r\n//     pageNumbers.push(i);\r\n//     }\r\n\r\n//   return (\r\n//     <Styled className='pagination-nav'>\r\n//       <ul className='pagination'>\r\n//         {pageNumbers.length === 1\r\n//           ? ''\r\n//           : pageNumbers.map(number => (\r\n//               <li key={number} className='page-item'>\r\n//                 <Link href={typeFor + number}>\r\n//                   <div\r\n//                     onClick={() => paginate(number)}\r\n//                     className={`page-link ${\r\n//                       number === currentPage ? 'active' : ''\r\n//                     }`}\r\n//                   >\r\n//                     {number}\r\n//                   </div>\r\n//                 </Link>\r\n//               </li>\r\n//             ))}\r\n//       </ul>\r\n//     </Styled>\r\n//   );\r\n// };\r\n\r\n// export default Pagination;\r\n\r\n/* Pagination Component \r\n-------------------------------------------------*/\r\n\r\n// Pagination.propTypes = propTypes;\r\n\r\nconst createPagination = params => {\r\n  const {\r\n    numberOfArticles,\r\n    articlesPerPage,\r\n    currentPage,\r\n    numberOfButtons\r\n  } = params;\r\n\r\n  const numberOfPages = Math.ceil(numberOfArticles / articlesPerPage);\r\n\r\n  if (currentPage > numberOfPages || currentPage < 1)\r\n    return {\r\n      pagination: [],\r\n      currentPage\r\n    };\r\n\r\n  const buttons = Array(numberOfPages)\r\n    .fill(1)\r\n    .map((e, i) => e + i);\r\n  const sideButtons =\r\n    numberOfButtons % 2 === 0 ? numberOfButtons / 2 : (numberOfButtons - 1) / 2;\r\n\r\n  const calculLeft = (rest = 0) => {\r\n    return {\r\n      array: buttons\r\n        .slice(0, currentPage - 1)\r\n        .reverse()\r\n        .slice(0, sideButtons + rest)\r\n        .reverse(),\r\n      rest: function() {\r\n        return sideButtons - this.array.length;\r\n      }\r\n    };\r\n  };\r\n\r\n  const calculRight = (rest = 0) => {\r\n    return {\r\n      array: buttons.slice(currentPage).slice(0, sideButtons + rest),\r\n      rest: function() {\r\n        return sideButtons - this.array.length;\r\n      }\r\n    };\r\n  };\r\n\r\n  const leftButtons = calculLeft(calculRight().rest()).array;\r\n  const rightButtons = calculRight(calculLeft().rest()).array;\r\n\r\n  return {\r\n    pagination: [...leftButtons, currentPage, ...rightButtons],\r\n    currentPage\r\n  };\r\n};\r\n\r\nexport default createPagination;\r\n"]},"metadata":{},"sourceType":"module"}