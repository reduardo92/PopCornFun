{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { loginValidation } from '../../server/Validation';\nimport User from '../../server/models/User';\nexport default (async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n  auth(req, res);\n  console.log('from req', req.headers);\n\n  if (method === 'GET') {\n    console.log('from req', req.user);\n\n    try {\n      const user = await User.findById('5e87b29ed5f2fe088cfb2259').select('-password');\n      res.json(user);\n    } catch (err) {\n      console.log(err.message);\n      res.status(500).send('Server error');\n    }\n  } else if (method === 'POST') {\n    const {\n      error\n    } = loginValidation(req.body);\n    if (error) return res.status(400).json({\n      msg: error.details[0].message\n    });\n    const {\n      email,\n      password\n    } = req.body;\n\n    try {\n      let user = await User.findOne({\n        email\n      });\n\n      if (!user) {\n        return res.status(400).json({\n          msg: 'Invalid Credentials'\n        });\n      }\n\n      const isMatch = await bcrypt.compare(password, user.password);\n\n      if (!isMatch) {\n        return res.status(400).json({\n          msg: 'Invalid Credentials'\n        });\n      }\n\n      const payload = {\n        user: {\n          id: user.id\n        }\n      }; // use json token\n\n      jwt.sign(payload, process.env.jwtSecret, {\n        expiresIn: 360000\n      }, (err, token) => {\n        if (err) throw err;\n        res.json({\n          token\n        });\n      });\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n}); // else if (method === 'POST') {\n//     const { error } = loginValidation(req.body);\n//     if (error) return res.status(400).json({ msg: error.details[0].message });\n//     const { email, password } = req.body;\n//     try {\n//       let user = await User.findOne({ email });\n//       if (!user) {\n//         return res.status(400).json({ msg: 'Invalid Credentials' });\n//       }\n//       const isMatch = await bcrypt.compare(password, user.password);\n//       if (!isMatch) {\n//         return res.status(400).json({ msg: 'Invalid Credentials' });\n//       }\n//       const payload = {\n//         user: {\n//           id: user.id\n//         }\n//       };\n//       // use json token\n//       jwt.sign(\n//         payload,\n//         process.env.jwtSecret,\n//         {\n//           expiresIn: 360000\n//         },\n//         (err, token) => {\n//           if (err) throw err;\n//           res.json({ token });\n//         }\n//       );\n//     } catch (err) {\n//       console.error(err.message);\n//       res.status(500).send('Server Error');\n//     }\n//   }\n// try {\n//     const { method } = req;\n//     switch (method) {\n//       case 'GET':\n//         break;\n//       default:\n//         res.setHeader('Allow', ['POST']);\n//         res.status(405).end(`Method ${method} Not Allowed`);\n//     }\n// @route   GET api/auth\n// @desc    Get logged in user\n// @access  Private\n// router.get('/', auth, async (req, res) => {\n//   try {\n//     const user = await User.findById(req.user.id).select('-password');\n//     res.json(user);\n//   } catch (err) {\n//     console.log(err.message);\n//     res.status(500).send('Server error');\n//   }\n// });\n// // @route   POST api/auth\n// // @desc    Auth user & get token\n// // @access  Public\n// router.post('/', async (req, res) => {\n//   const { error } = loginValidation(req.body);\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\n//   const { email, password } = req.body;\n//   try {\n//     let user = await User.findOne({ email });\n//     if (!user) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const isMatch = await bcrypt.compare(password, user.password);\n//     if (!isMatch) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const payload = {\n//       user: {\n//         id: user.id\n//       }\n//     };\n//     // use json token\n//     jwt.sign(\n//       payload,\n//       process.env.jwtSecret,\n//       {\n//         expiresIn: 360000\n//       },\n//       (err, token) => {\n//         if (err) throw err;\n//         res.json({ token });\n//       }\n//     );\n//   } catch (err) {\n//     console.error(err.message);\n//     res.status(500).send('Server Error');\n//   }\n// });","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/auth.js"],"names":["auth","connectDB","bcrypt","jwt","loginValidation","User","req","res","method","console","log","headers","user","findById","select","json","err","message","status","send","error","body","msg","details","email","password","findOne","isMatch","compare","payload","id","sign","process","env","jwtSecret","expiresIn","token"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport { loginValidation } from '../../server/Validation';\r\n\r\nimport User from '../../server/models/User';\r\n\r\nexport default async (req, res) => {\r\n  await connectDB();\r\n  const { method } = req;\r\n  auth(req, res);\r\n  console.log('from req', req.headers);\r\n\r\n  if (method === 'GET') {\r\n    console.log('from req', req.user);\r\n    try {\r\n      const user = await User.findById('5e87b29ed5f2fe088cfb2259').select(\r\n        '-password'\r\n      );\r\n      res.json(user);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  } else if (method === 'POST') {\r\n    const { error } = loginValidation(req.body);\r\n\r\n    if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      let user = await User.findOne({ email });\r\n\r\n      if (!user) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n      if (!isMatch) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id\r\n        }\r\n      };\r\n\r\n      // use json token\r\n      jwt.sign(\r\n        payload,\r\n        process.env.jwtSecret,\r\n        {\r\n          expiresIn: 360000\r\n        },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  }\r\n};\r\n\r\n// else if (method === 'POST') {\r\n//     const { error } = loginValidation(req.body);\r\n\r\n//     if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n//     const { email, password } = req.body;\r\n\r\n//     try {\r\n//       let user = await User.findOne({ email });\r\n\r\n//       if (!user) {\r\n//         return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//       }\r\n\r\n//       const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n//       if (!isMatch) {\r\n//         return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//       }\r\n\r\n//       const payload = {\r\n//         user: {\r\n//           id: user.id\r\n//         }\r\n//       };\r\n\r\n//       // use json token\r\n//       jwt.sign(\r\n//         payload,\r\n//         process.env.jwtSecret,\r\n//         {\r\n//           expiresIn: 360000\r\n//         },\r\n//         (err, token) => {\r\n//           if (err) throw err;\r\n//           res.json({ token });\r\n//         }\r\n//       );\r\n//     } catch (err) {\r\n//       console.error(err.message);\r\n//       res.status(500).send('Server Error');\r\n//     }\r\n//   }\r\n\r\n// try {\r\n//     const { method } = req;\r\n\r\n//     switch (method) {\r\n//       case 'GET':\r\n\r\n//         break;\r\n//       default:\r\n//         res.setHeader('Allow', ['POST']);\r\n//         res.status(405).end(`Method ${method} Not Allowed`);\r\n//     }\r\n\r\n// @route   GET api/auth\r\n// @desc    Get logged in user\r\n// @access  Private\r\n\r\n// router.get('/', auth, async (req, res) => {\r\n//   try {\r\n//     const user = await User.findById(req.user.id).select('-password');\r\n//     res.json(user);\r\n//   } catch (err) {\r\n//     console.log(err.message);\r\n//     res.status(500).send('Server error');\r\n//   }\r\n// });\r\n\r\n// // @route   POST api/auth\r\n// // @desc    Auth user & get token\r\n// // @access  Public\r\n\r\n// router.post('/', async (req, res) => {\r\n//   const { error } = loginValidation(req.body);\r\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n//   const { email, password } = req.body;\r\n\r\n//   try {\r\n//     let user = await User.findOne({ email });\r\n\r\n//     if (!user) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n//     if (!isMatch) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const payload = {\r\n//       user: {\r\n//         id: user.id\r\n//       }\r\n//     };\r\n\r\n//     // use json token\r\n//     jwt.sign(\r\n//       payload,\r\n//       process.env.jwtSecret,\r\n//       {\r\n//         expiresIn: 360000\r\n//       },\r\n//       (err, token) => {\r\n//         if (err) throw err;\r\n//         res.json({ token });\r\n//       }\r\n//     );\r\n//   } catch (err) {\r\n//     console.error(err.message);\r\n//     res.status(500).send('Server Error');\r\n//   }\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}