{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_MODAL_MEDIA, RESET_MODAL_MEDIA } from './types';\n\nvar useMovieReducer = function useMovieReducer(state, action) {\n  switch (action.type) {\n    // Set Modal Media\n    case SET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: action.payload,\n          toggle: true,\n          \"for\": action.typeFor\n        }\n      });\n    // Clear Modal Media\n\n    case RESET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: null,\n          toggle: false,\n          \"for\": null\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default useMovieReducer;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/context/useMovieReducer.js"],"names":["SET_MODAL_MEDIA","RESET_MODAL_MEDIA","useMovieReducer","state","action","type","isModal","media","payload","toggle","typeFor"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,iBAA1B,QAAmD,SAAnD;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKL,eAAL;AACE,+BACKG,KADL;AAEEG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEH,MAAM,CAACI,OAAhB;AAAyBC,UAAAA,MAAM,EAAE,IAAjC;AAAuC,iBAAKL,MAAM,CAACM;AAAnD;AAFX;AAIF;;AACA,SAAKT,iBAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE,IAAT;AAAeE,UAAAA,MAAM,EAAE,KAAvB;AAA8B,iBAAK;AAAnC;AAFX;;AAKF;AACE,aAAON,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,eAAf","sourcesContent":["import { SET_MODAL_MEDIA, RESET_MODAL_MEDIA } from './types';\r\n\r\nconst useMovieReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Set Modal Media\r\n    case SET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: action.payload, toggle: true, for: action.typeFor }\r\n      };\r\n    // Clear Modal Media\r\n    case RESET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: null, toggle: false, for: null }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default useMovieReducer;\r\n"]},"metadata":{},"sourceType":"module"}