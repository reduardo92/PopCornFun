{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport cookie from 'cookie';\nimport { compare } from 'bcryptjs';\nimport { sign } from 'jsonwebtoken';\nimport { loginValidation } from '../../server/Validation';\nimport User from '../../server/models/User';\nexport default auth(async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  if (method === 'POST') {\n    // @route   GET api/auth\n    // @desc    Get logged in user\n    // @access  Private\n    const {\n      error\n    } = loginValidation(req.body);\n    if (error) return res.status(400).json({\n      msg: error.details[0].message\n    });\n    const {\n      email,\n      password\n    } = req.body;\n\n    try {\n      let user = await User.findOne({\n        email\n      });\n\n      if (!user) {\n        return res.status(400).json({\n          msg: 'Invalid Credentials'\n        });\n      }\n\n      compare(password, user.password, (err, result) => {\n        if (!err && result) {\n          const payload = {\n            user: {\n              id: user.id\n            }\n          };\n          const jwt = sign(payload, process.env.jwtSecret, {\n            expiresIn: 360000\n          });\n          res.setHeader('Set-Cookie', cookie.serialize('auth', jwt, {\n            httpOnly: true,\n            secure: false,\n            sameSite: 'strict',\n            maxAge: 3600,\n            path: '/'\n          })); // res.json({ message: 'Welcome back to the Fun!' });\n\n          res.json({\n            token: jwt.token\n          });\n        } else {\n          return res.status(400).json({\n            msg: 'Invalid Credentials'\n          });\n        }\n      }); // use json token\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  } else {\n    // @route   GET api/auth\n    // @desc    Get logged in user\n    // @access  Private\n    try {\n      const user = await User.findById(req.user.id).select('-password');\n      res.json(user);\n    } catch (err) {\n      console.log(err.message);\n      res.status(500).send('Server error');\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/auth.js"],"names":["auth","connectDB","cookie","compare","sign","loginValidation","User","req","res","method","error","body","status","json","msg","details","message","email","password","user","findOne","err","result","payload","id","jwt","process","env","jwtSecret","expiresIn","setHeader","serialize","httpOnly","secure","sameSite","maxAge","path","token","console","send","findById","select","log"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport cookie from 'cookie';\r\nimport { compare } from 'bcryptjs';\r\nimport { sign } from 'jsonwebtoken';\r\n\r\nimport { loginValidation } from '../../server/Validation';\r\n\r\nimport User from '../../server/models/User';\r\n\r\nexport default auth(async (req, res) => {\r\n  await connectDB();\r\n\r\n  const { method } = req;\r\n\r\n  if (method === 'POST') {\r\n    // @route   GET api/auth\r\n    // @desc    Get logged in user\r\n    // @access  Private\r\n    const { error } = loginValidation(req.body);\r\n\r\n    if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      let user = await User.findOne({ email });\r\n\r\n      if (!user) {\r\n        return res.status(400).json({ msg: 'Invalid Credentials' });\r\n      }\r\n\r\n      compare(password, user.password, (err, result) => {\r\n        if (!err && result) {\r\n          const payload = {\r\n            user: {\r\n              id: user.id,\r\n            },\r\n          };\r\n\r\n          const jwt = sign(payload, process.env.jwtSecret, {\r\n            expiresIn: 360000,\r\n          });\r\n\r\n          res.setHeader(\r\n            'Set-Cookie',\r\n            cookie.serialize('auth', jwt, {\r\n              httpOnly: true,\r\n              secure: process.env.NODE_ENV !== 'development',\r\n              sameSite: 'strict',\r\n              maxAge: 3600,\r\n              path: '/',\r\n            })\r\n          );\r\n          // res.json({ message: 'Welcome back to the Fun!' });\r\n          res.json({ token: jwt.token });\r\n        } else {\r\n          return res.status(400).json({ msg: 'Invalid Credentials' });\r\n        }\r\n      });\r\n\r\n      // use json token\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  } else {\r\n    // @route   GET api/auth\r\n    // @desc    Get logged in user\r\n    // @access  Private\r\n    try {\r\n      const user = await User.findById(req.user.id).select('-password');\r\n      res.json(user);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}