{"ast":null,"code":"// import nextConnect from 'next-connect';\n// import middleware from '../../server/middleware/database';\nimport connectDB from '../../server/config/db';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken'; // Joi validation\n\nimport { registerValidation } from '../../server/Validation'; // User Model\n\nimport User from '../../server/models/User';\nexport default (async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  if (method === 'POST') {\n    try {\n      const {\n        error\n      } = registerValidation(req.body);\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const {\n        userName,\n        email,\n        password\n      } = req.body;\n      let user = await User.findOne({\n        email\n      }); //   check is user exists\n\n      if (user) {\n        return res.status(400).json({\n          msg: 'User already exists'\n        });\n      } // create a new user\n\n\n      user = new User({\n        userName,\n        email,\n        password\n      }); // crpt password\n\n      const salt = await bcrypt.genSalt(10);\n      user.password = await bcrypt.hash(password, salt); // save user\n\n      await user.save();\n      res.json({\n        msg: 'Thank you for signing up '\n      }); // const payload = {\n      //   user: {\n      //     id: user.id,\n      //   },\n      // };\n      // // use json token\n      // jwt.sign(\n      //   payload,\n      //   process.env.jwtSecret,\n      //   {\n      //     expiresIn: 360000,\n      //   },\n      //   (err, token) => {\n      //     if (err) throw err;\n      //     res.json({ token });\n      //   }\n      // );\n    } catch (e) {\n      res.status(500).json({\n        error: e.message || 'something went wrong'\n      });\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/user.js"],"names":["connectDB","bcrypt","jwt","registerValidation","User","req","res","method","error","body","status","json","msg","details","message","userName","email","password","user","findOne","salt","genSalt","hash","save","e"],"mappings":"AAAA;AACA;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,yBAAnC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMN,SAAS,EAAf;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAaF,GAAnB;;AAEA,MAAIE,MAAM,KAAK,MAAf,EAAuB;AACrB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAYL,kBAAkB,CAACE,GAAG,CAACI,IAAL,CAApC;AACA,UAAID,KAAJ,EAAW,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiBC;AAAxB,OAArB,CAAP;AAEX,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,KAAZ;AAAmBC,QAAAA;AAAnB,UAAgCZ,GAAG,CAACI,IAA1C;AAEA,UAAIS,IAAI,GAAG,MAAMd,IAAI,CAACe,OAAL,CAAa;AAAEH,QAAAA;AAAF,OAAb,CAAjB,CANE,CAQF;;AACA,UAAIE,IAAJ,EAAU;AACR,eAAOZ,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAXC,CAYF;;;AACAM,MAAAA,IAAI,GAAG,IAAId,IAAJ,CAAS;AACdW,QAAAA,QADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA;AAHc,OAAT,CAAP,CAbE,CAmBF;;AACA,YAAMG,IAAI,GAAG,MAAMnB,MAAM,CAACoB,OAAP,CAAe,EAAf,CAAnB;AACAH,MAAAA,IAAI,CAACD,QAAL,GAAgB,MAAMhB,MAAM,CAACqB,IAAP,CAAYL,QAAZ,EAAsBG,IAAtB,CAAtB,CArBE,CAsBF;;AACA,YAAMF,IAAI,CAACK,IAAL,EAAN;AAEAjB,MAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAAT,EAzBE,CA2BF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA5CD,CA4CE,OAAOY,CAAP,EAAU;AACVlB,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,QAAAA,KAAK,EAAEgB,CAAC,CAACV,OAAF,IAAa;AAAtB,OAArB;AACD;AACF;AACF,CArDD","sourcesContent":["// import nextConnect from 'next-connect';\r\n// import middleware from '../../server/middleware/database';\r\nimport connectDB from '../../server/config/db';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n// Joi validation\r\nimport { registerValidation } from '../../server/Validation';\r\n// User Model\r\nimport User from '../../server/models/User';\r\n\r\nexport default async (req, res) => {\r\n  await connectDB();\r\n  const { method } = req;\r\n\r\n  if (method === 'POST') {\r\n    try {\r\n      const { error } = registerValidation(req.body);\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const { userName, email, password } = req.body;\r\n\r\n      let user = await User.findOne({ email });\r\n\r\n      //   check is user exists\r\n      if (user) {\r\n        return res.status(400).json({ msg: 'User already exists' });\r\n      }\r\n      // create a new user\r\n      user = new User({\r\n        userName,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      // crpt password\r\n      const salt = await bcrypt.genSalt(10);\r\n      user.password = await bcrypt.hash(password, salt);\r\n      // save user\r\n      await user.save();\r\n\r\n      res.json({ msg: 'Thank you for signing up ' });\r\n\r\n      // const payload = {\r\n      //   user: {\r\n      //     id: user.id,\r\n      //   },\r\n      // };\r\n      // // use json token\r\n      // jwt.sign(\r\n      //   payload,\r\n      //   process.env.jwtSecret,\r\n      //   {\r\n      //     expiresIn: 360000,\r\n      //   },\r\n      //   (err, token) => {\r\n      //     if (err) throw err;\r\n      //     res.json({ token });\r\n      //   }\r\n      // );\r\n    } catch (e) {\r\n      res.status(500).json({ error: e.message || 'something went wrong' });\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}