{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\Pagination.jsx\";\nvar __jsx = React.createElement;\n// import React, { useContext } from 'react';\n// import styled from 'styled-components';\n// import MovieContext from '../context/MovieContext';\n// import Link from 'next/link';\n// const Styled = styled.nav`\n//   .pagination {\n//     justify-content: center;\n//     flex-wrap: wrap;\n//   }\n//   .page-link {\n//     color: var(--primary-clr);\n//     font-weight: bold;\n//     /* font-family: var(--primary--fn); */\n//     border: 1px solid var(--primary--clr);\n//     cursor: pointer;\n//     &:hover,\n//     &:focus,\n//     &.active {\n//       background-color: var(--primary--clr);\n//     }\n//   }\n//   /* .pagination  */\n//   .page-item + .page-item {\n//     margin-left: 0.8em;\n//   }\n//   .page-item {\n//     padding: 0.5em 0;\n//   }\n// `;\n// const Pagination = ({ total_pages, typeFor }) => {\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\n//   const pageNumbers = [];\n//     let prev = '';\n//     let next = '';\n//   for (let i = 1; i <= total_pages; i++) {\n//     pageNumbers.push(i);\n//     }\n//   return (\n//     <Styled className='pagination-nav'>\n//       <ul className='pagination'>\n//         {pageNumbers.length === 1\n//           ? ''\n//           : pageNumbers.map(number => (\n//               <li key={number} className='page-item'>\n//                 <Link href={typeFor + number}>\n//                   <div\n//                     onClick={() => paginate(number)}\n//                     className={`page-link ${\n//                       number === currentPage ? 'active' : ''\n//                     }`}\n//                   >\n//                     {number}\n//                   </div>\n//                 </Link>\n//               </li>\n//             ))}\n//       </ul>\n//     </Styled>\n//   );\n// };\n// export default Pagination;\n\n/* Pagination Component \r\n-------------------------------------------------*/\nimport React from 'react';\nimport { useEffect } from 'react'; // const propTypes = {\n//   items: React.PropTypes.array.isRequired,\n//   onChangePage: React.PropTypes.func.isRequired,\n//   initialPage: React.PropTypes.number\n// };\n\nvar defaultProps = {\n  initialPage: 1\n};\n\nvar Pagination = function Pagination(_ref) {\n  var items = _ref.items,\n      initialPage = _ref.initialPage,\n      onChangePage = _ref.onChangePage;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      pager = _useState2[0],\n      setPager = _useState2[1];\n\n  useEffect(function () {\n    // set page if items array isn't empty\n    if (items && items.length) {\n      setPage(initialPage);\n    } // reset page if items array has changed\n\n\n    setPager(function (prevProps) {\n      if (items !== prevProps.items) {\n        setPage(initialPage);\n      }\n    });\n  }, [items]);\n\n  var setPage = function setPage(page) {\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = (_readOnlyError(\"pager\"), getPager(items.length, page)); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n    setPager(pager); // call change page function in parent component\n\n    onChangePage(pageOfItems);\n  };\n\n  var getPager = function getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = _toConsumableArray(Array(endPage + 1 - startPage).keys()).map(function (i) {\n      return startPage + i;\n    }); // return object with all pager properties required by the view\n\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  };\n\n  if (!pager.pages || pager.pages.length <= 1) {\n    // don't display pager if there is only 1 page\n    return null;\n  }\n\n  return __jsx(\"ul\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    className: pager.currentPage === 1 ? 'disabled' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return setPage(1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"First\")), __jsx(\"li\", {\n    className: pager.currentPage === 1 ? 'disabled' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return setPage(pager.currentPage - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Previous\")), pager.pages.map(function (page, index) {\n    return __jsx(\"li\", {\n      key: index,\n      className: pager.currentPage === page ? 'active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: function onClick() {\n        return setPage(page);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, page));\n  }), __jsx(\"li\", {\n    className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return setPage(pager.currentPage + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Next\")), __jsx(\"li\", {\n    className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return setPage(pager.totalPages);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Last\")));\n};\n\nexport default Pagination; // Pagination.propTypes = propTypes;\n\nPagination.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/Pagination.jsx"],"names":["React","useEffect","defaultProps","initialPage","Pagination","items","onChangePage","useState","pager","setPager","length","setPage","prevProps","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","totalItems","currentPage","pageSize","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","index"],"mappings":"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","sourcesContent":["// import React, { useContext } from 'react';\r\n// import styled from 'styled-components';\r\n// import MovieContext from '../context/MovieContext';\r\n// import Link from 'next/link';\r\n\r\n// const Styled = styled.nav`\r\n//   .pagination {\r\n//     justify-content: center;\r\n//     flex-wrap: wrap;\r\n//   }\r\n\r\n//   .page-link {\r\n//     color: var(--primary-clr);\r\n//     font-weight: bold;\r\n//     /* font-family: var(--primary--fn); */\r\n//     border: 1px solid var(--primary--clr);\r\n//     cursor: pointer;\r\n//     &:hover,\r\n//     &:focus,\r\n//     &.active {\r\n//       background-color: var(--primary--clr);\r\n//     }\r\n//   }\r\n\r\n//   /* .pagination  */\r\n\r\n//   .page-item + .page-item {\r\n//     margin-left: 0.8em;\r\n//   }\r\n\r\n//   .page-item {\r\n//     padding: 0.5em 0;\r\n//   }\r\n// `;\r\n\r\n// const Pagination = ({ total_pages, typeFor }) => {\r\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\r\n\r\n//   const pageNumbers = [];\r\n\r\n//     let prev = '';\r\n\r\n//     let next = '';\r\n\r\n//   for (let i = 1; i <= total_pages; i++) {\r\n//     pageNumbers.push(i);\r\n//     }\r\n\r\n//   return (\r\n//     <Styled className='pagination-nav'>\r\n//       <ul className='pagination'>\r\n//         {pageNumbers.length === 1\r\n//           ? ''\r\n//           : pageNumbers.map(number => (\r\n//               <li key={number} className='page-item'>\r\n//                 <Link href={typeFor + number}>\r\n//                   <div\r\n//                     onClick={() => paginate(number)}\r\n//                     className={`page-link ${\r\n//                       number === currentPage ? 'active' : ''\r\n//                     }`}\r\n//                   >\r\n//                     {number}\r\n//                   </div>\r\n//                 </Link>\r\n//               </li>\r\n//             ))}\r\n//       </ul>\r\n//     </Styled>\r\n//   );\r\n// };\r\n\r\n// export default Pagination;\r\n\r\n/* Pagination Component \r\n-------------------------------------------------*/\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\n\r\n// const propTypes = {\r\n//   items: React.PropTypes.array.isRequired,\r\n//   onChangePage: React.PropTypes.func.isRequired,\r\n//   initialPage: React.PropTypes.number\r\n// };\r\n\r\nconst defaultProps = {\r\n  initialPage: 1\r\n};\r\n\r\nconst Pagination = ({ items, initialPage, onChangePage }) => {\r\n  const [pager, setPager] = useState({});\r\n\r\n  useEffect(() => {\r\n    // set page if items array isn't empty\r\n    if (items && items.length) {\r\n      setPage(initialPage);\r\n    }\r\n\r\n    // reset page if items array has changed\r\n    setPager(prevProps => {\r\n      if (items !== prevProps.items) {\r\n        setPage(initialPage);\r\n      }\r\n    });\r\n  }, [items]);\r\n\r\n  const setPage = page => {\r\n    if (page < 1 || page > pager.totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = getPager(items.length, page);\r\n\r\n    // get new page of items from items array\r\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n    // update state\r\n    setPager(pager);\r\n\r\n    // call change page function in parent component\r\n    onChangePage(pageOfItems);\r\n  };\r\n\r\n  const getPager = (totalItems, currentPage, pageSize) => {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    var startPage, endPage;\r\n\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    var startIndex = (currentPage - 1) * pageSize;\r\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  };\r\n\r\n  if (!pager.pages || pager.pages.length <= 1) {\r\n    // don't display pager if there is only 1 page\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ul className='pagination'>\r\n      <li className={pager.currentPage === 1 ? 'disabled' : ''}>\r\n        <a onClick={() => setPage(1)}>First</a>\r\n      </li>\r\n      <li className={pager.currentPage === 1 ? 'disabled' : ''}>\r\n        <a onClick={() => setPage(pager.currentPage - 1)}>Previous</a>\r\n      </li>\r\n      {pager.pages.map((page, index) => (\r\n        <li key={index} className={pager.currentPage === page ? 'active' : ''}>\r\n          <a onClick={() => setPage(page)}>{page}</a>\r\n        </li>\r\n      ))}\r\n      <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\r\n        <a onClick={() => setPage(pager.currentPage + 1)}>Next</a>\r\n      </li>\r\n      <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\r\n        <a onClick={() => setPage(pager.totalPages)}>Last</a>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n// Pagination.propTypes = propTypes;\r\nPagination.defaultProps = defaultProps;\r\n"]},"metadata":{},"sourceType":"module"}