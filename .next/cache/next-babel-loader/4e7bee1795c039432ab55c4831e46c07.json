{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\mediaProfile\\\\ProfileStats.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport { TiWorld } from 'react-icons/ti';\nimport SocialLinks from '../SocialLinks';\nimport timeConvert from '../../utility/timeConvert';\nimport numberWithCommas from '../../utility/numberWithCommas';\nconst Styled = styled.section.withConfig({\n  displayName: \"ProfileStats__Styled\",\n  componentId: \"sc-6w85o7-0\"\n})([\"display:grid;grid-row-gap:1em;background-color:var(--accent-clr);padding:2em 1em;*{color:var(--second-clr);}.stat--title{font-weight:bold;margin-bottom:0.1em;text-transform:capitalize;}\"]);\n\nconst ProfileStats = ({\n  data\n}) => {\n  //   console.log(\n  //     data.release_dates.results.filter(item => item.iso_3166_1 === 'US')\n  //   );\n  const getReleaseType = {\n    1: 'Premiere',\n    2: 'Theatrical (limited)',\n    3: 'Theatrical',\n    4: 'Digital',\n    5: 'Physical',\n    6: 'Tv'\n  };\n\n  const setDateFormat = date => {\n    const months = ['january', 'febuary', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const splitDate = date.split('-');\n    const sett = Math.floor('09');\n    return sett;\n  };\n\n  console.log(setDateFormat('2020-01-17'));\n  return __jsx(Styled, {\n    className: \"profile--stats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(SocialLinks, {\n    data: data.external_ids,\n    homepage: data.homepage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"profile--stats--facts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: \"facts--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Facts\"), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Status\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, data.status)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Release Information\"), __jsx(\"ul\", {\n    className: \"release--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, data.release_dates.results.filter(item => item.iso_3166_1 === 'US')[0].release_dates.map((item, i) => __jsx(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"release--date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(TiWorld, {\n    className: \"world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, item.release_date.slice(0, 10))), __jsx(\"div\", {\n    className: \"certification\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"rate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, item.certification), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, getReleaseType[item.type])))))), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Original Language\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, data.original_language)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Runtime\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, timeConvert(data.runtime))), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Budget\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"$\", numberWithCommas(data.revenue)))));\n};\n\nexport default ProfileStats;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/mediaProfile/ProfileStats.jsx"],"names":["React","styled","TiWorld","SocialLinks","timeConvert","numberWithCommas","Styled","section","ProfileStats","data","getReleaseType","setDateFormat","date","months","splitDate","split","sett","Math","floor","console","log","external_ids","homepage","status","release_dates","results","filter","item","iso_3166_1","map","i","release_date","slice","certification","type","original_language","runtime","revenue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { TiWorld } from 'react-icons/ti';\r\nimport SocialLinks from '../SocialLinks';\r\nimport timeConvert from '../../utility/timeConvert';\r\nimport numberWithCommas from '../../utility/numberWithCommas';\r\n\r\nconst Styled = styled.section`\r\n  display: grid;\r\n  grid-row-gap: 1em;\r\n  background-color: var(--accent-clr);\r\n  padding: 2em 1em;\r\n  * {\r\n    color: var(--second-clr);\r\n  }\r\n\r\n  .stat--title {\r\n    font-weight: bold;\r\n    margin-bottom: 0.1em;\r\n    text-transform: capitalize;\r\n  }\r\n`;\r\n\r\nconst ProfileStats = ({ data }) => {\r\n  //   console.log(\r\n  //     data.release_dates.results.filter(item => item.iso_3166_1 === 'US')\r\n  //   );\r\n\r\n  const getReleaseType = {\r\n    1: 'Premiere',\r\n    2: 'Theatrical (limited)',\r\n    3: 'Theatrical',\r\n    4: 'Digital',\r\n    5: 'Physical',\r\n    6: 'Tv'\r\n  };\r\n\r\n  const setDateFormat = date => {\r\n    const months = [\r\n      'january',\r\n      'febuary',\r\n      'march',\r\n      'april',\r\n      'may',\r\n      'june',\r\n      'july',\r\n      'august',\r\n      'september',\r\n      'october',\r\n      'november',\r\n      'december'\r\n    ];\r\n    const splitDate = date.split('-');\r\n    const sett = Math.floor('09');\r\n    return sett;\r\n  };\r\n\r\n  console.log(setDateFormat('2020-01-17'));\r\n\r\n  return (\r\n    <Styled className='profile--stats'>\r\n      <SocialLinks data={data.external_ids} homepage={data.homepage} />\r\n      <div className='profile--stats--facts'>\r\n        <h3 className='facts--title'>Facts</h3>\r\n        <div className='stat'>\r\n          <p className='stat--title'>Status</p>\r\n          <span className='stat--subtext'>{data.status}</span>\r\n        </div>\r\n        <div className='stat'>\r\n          <p className='stat--title'>Release Information</p>\r\n          <ul className='release--content'>\r\n            {data.release_dates.results\r\n              .filter(item => item.iso_3166_1 === 'US')[0]\r\n              .release_dates.map((item, i) => (\r\n                <li key={i}>\r\n                  <div className='release--date'>\r\n                    <TiWorld className='world' />\r\n                    <span className='stat--subtext'>\r\n                      {item.release_date.slice(0, 10)}\r\n                    </span>\r\n                  </div>\r\n                  <div className='certification'>\r\n                    <span className='rate'>{item.certification}</span>\r\n                    <span className='stat--subtext'>\r\n                      {getReleaseType[item.type]}\r\n                    </span>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n        <div className='stat'>\r\n          <p className='stat--title'>Original Language</p>\r\n          <span className='stat--subtext'>{data.original_language}</span>\r\n        </div>\r\n        <div className='stat'>\r\n          <p className='stat--title'>Runtime</p>\r\n          <span className='stat--subtext'>{timeConvert(data.runtime)}</span>\r\n        </div>\r\n        <div className='stat'>\r\n          <p className='stat--title'>Budget</p>\r\n          <span className='stat--subtext'>\r\n            ${numberWithCommas(data.revenue)}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </Styled>\r\n  );\r\n};\r\n\r\nexport default ProfileStats;\r\n"]},"metadata":{},"sourceType":"module"}