{"ast":null,"code":"const bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst auth = require('../../server/middleware/auth'); // Joi validator\n// const { loginValidation } = require('../Validation');\n// User Model\n\n\nconsole.log(auth);\nexport default (async (req, res) => {}); // try {\n//     const { method } = req;\n//     switch (method) {\n//       case 'GET':\n//         break;\n//       default:\n//         res.setHeader('Allow', ['POST']);\n//         res.status(405).end(`Method ${method} Not Allowed`);\n//     }\n// @route   GET api/auth\n// @desc    Get logged in user\n// @access  Private\n// router.get('/', auth, async (req, res) => {\n//   try {\n//     const user = await User.findById(req.user.id).select('-password');\n//     res.json(user);\n//   } catch (err) {\n//     console.log(err.message);\n//     res.status(500).send('Server error');\n//   }\n// });\n// // @route   POST api/auth\n// // @desc    Auth user & get token\n// // @access  Public\n// router.post('/', async (req, res) => {\n//   const { error } = loginValidation(req.body);\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\n//   const { email, password } = req.body;\n//   try {\n//     let user = await User.findOne({ email });\n//     if (!user) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const isMatch = await bcrypt.compare(password, user.password);\n//     if (!isMatch) {\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\n//     }\n//     const payload = {\n//       user: {\n//         id: user.id\n//       }\n//     };\n//     // use json token\n//     jwt.sign(\n//       payload,\n//       process.env.jwtSecret,\n//       {\n//         expiresIn: 360000\n//       },\n//       (err, token) => {\n//         if (err) throw err;\n//         res.json({ token });\n//       }\n//     );\n//   } catch (err) {\n//     console.error(err.message);\n//     res.status(500).send('Server Error');\n//   }\n// });","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/auth.js"],"names":["bcrypt","require","jwt","auth","console","log","req","res"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,8BAAD,CAApB,C,CAEA;AACA;AACA;;;AAEAG,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB,CAAE,CAArC,E,CAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst auth = require('../../server/middleware/auth');\r\n\r\n// Joi validator\r\n// const { loginValidation } = require('../Validation');\r\n// User Model\r\n\r\nconsole.log(auth);\r\n\r\nexport default async (req, res) => {};\r\n\r\n// try {\r\n//     const { method } = req;\r\n\r\n//     switch (method) {\r\n//       case 'GET':\r\n\r\n//         break;\r\n//       default:\r\n//         res.setHeader('Allow', ['POST']);\r\n//         res.status(405).end(`Method ${method} Not Allowed`);\r\n//     }\r\n\r\n// @route   GET api/auth\r\n// @desc    Get logged in user\r\n// @access  Private\r\n\r\n// router.get('/', auth, async (req, res) => {\r\n//   try {\r\n//     const user = await User.findById(req.user.id).select('-password');\r\n//     res.json(user);\r\n//   } catch (err) {\r\n//     console.log(err.message);\r\n//     res.status(500).send('Server error');\r\n//   }\r\n// });\r\n\r\n// // @route   POST api/auth\r\n// // @desc    Auth user & get token\r\n// // @access  Public\r\n\r\n// router.post('/', async (req, res) => {\r\n//   const { error } = loginValidation(req.body);\r\n//   if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n//   const { email, password } = req.body;\r\n\r\n//   try {\r\n//     let user = await User.findOne({ email });\r\n\r\n//     if (!user) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n//     if (!isMatch) {\r\n//       return res.status(400).json({ msg: 'Invalid Credentials' });\r\n//     }\r\n\r\n//     const payload = {\r\n//       user: {\r\n//         id: user.id\r\n//       }\r\n//     };\r\n\r\n//     // use json token\r\n//     jwt.sign(\r\n//       payload,\r\n//       process.env.jwtSecret,\r\n//       {\r\n//         expiresIn: 360000\r\n//       },\r\n//       (err, token) => {\r\n//         if (err) throw err;\r\n//         res.json({ token });\r\n//       }\r\n//     );\r\n//   } catch (err) {\r\n//     console.error(err.message);\r\n//     res.status(500).send('Server Error');\r\n//   }\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}