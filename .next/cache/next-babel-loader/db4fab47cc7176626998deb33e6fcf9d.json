{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\pages\\\\tv\\\\[id].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport movieDB from '../../components/utility/movieDB';\nimport TopBilledCast from '../../components/ui/TopBilledCast';\nimport ReviewSection from '../../components/ui/ReviewSection';\nimport MediaSection from '../../components/ui/MediaSection';\nimport Layout from '../../components/layout';\nimport ProfileHeader from '../../components/ui/mediaProfile/ProfileHeader';\nimport RecommenSection from '../../components/ui/RecommenSection';\nimport ProfileStats from '../../components/ui/mediaProfile/ProfileStats/ProfileStats';\nimport MediaMainStyle from '../../components/ui/mediaProfile/mediaMainStyle';\n\nconst TvProfile = ({\n  tv\n}) => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, __jsx(MediaMainStyle, {\n  className: \"profile\",\n  bgImg: tv.backdrop_path,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, __jsx(\"div\", {\n  className: \"profile--backdrop\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), __jsx(\"div\", {\n  className: \"profile--main\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, __jsx(ProfileHeader, {\n  data: tv,\n  bgImg: tv.backdrop_path,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), __jsx(\"div\", {\n  className: \"main-con\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, __jsx(TopBilledCast, {\n  data: tv.credits.cast,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}), __jsx(ReviewSection, {\n  data: tv.reviews.results,\n  movieId: tv.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}), __jsx(MediaSection, {\n  videos: tv.videos.results,\n  posters: tv.images.posters,\n  backdrops: tv.images.backdrops,\n  typeId: tv.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), __jsx(RecommenSection, {\n  data: tv,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n})), __jsx(ProfileStats, {\n  data: tv,\n  keywords: Object.values(tv.keywords)[0],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}))));\n\nTvProfile.getInitialProps = async ctx => {\n  try {\n    const tv = await movieDB(`tv/${ctx.query.id || '62688'}`, 'append_to_response=account_states,external_ids,keywords,content_ratings,videos,recommendations,reviews,credits,images&include_image_language=en,null');\n    return {\n      tv: _objectSpread({\n        typeFor: 'tv'\n      }, tv)\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default TvProfile;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/tv/[id].jsx"],"names":["movieDB","TopBilledCast","ReviewSection","MediaSection","Layout","ProfileHeader","RecommenSection","ProfileStats","MediaMainStyle","TvProfile","tv","backdrop_path","credits","cast","reviews","results","id","videos","images","posters","backdrops","Object","values","keywords","getInitialProps","ctx","query","typeFor","error","console","log"],"mappings":";;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,kCAApB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,YAAP,MAAyB,4DAAzB;AACA,OAAOC,cAAP,MAA2B,iDAA3B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,cAAD;AAAgB,EAAA,SAAS,EAAC,SAA1B;AAAoC,EAAA,KAAK,EAAEA,EAAE,CAACC,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAK,EAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,aAAD;AAAe,EAAA,IAAI,EAAED,EAArB;AAAyB,EAAA,KAAK,EAAEA,EAAE,CAACC,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAK,EAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,aAAD;AAAe,EAAA,IAAI,EAAED,EAAE,CAACE,OAAH,CAAWC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,MAAC,aAAD;AAAe,EAAA,IAAI,EAAEH,EAAE,CAACI,OAAH,CAAWC,OAAhC;AAAyC,EAAA,OAAO,EAAEL,EAAE,CAACM,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE,MAAC,YAAD;AACE,EAAA,MAAM,EAAEN,EAAE,CAACO,MAAH,CAAUF,OADpB;AAEE,EAAA,OAAO,EAAEL,EAAE,CAACQ,MAAH,CAAUC,OAFrB;AAGE,EAAA,SAAS,EAAET,EAAE,CAACQ,MAAH,CAAUE,SAHvB;AAIE,EAAA,MAAM,EAAEV,EAAE,CAACM,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EASE,MAAC,eAAD;AAAiB,EAAA,IAAI,EAAEN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATF,CAFF,EAaE,MAAC,YAAD;AAAc,EAAA,IAAI,EAAEA,EAApB;AAAwB,EAAA,QAAQ,EAAEW,MAAM,CAACC,MAAP,CAAcZ,EAAE,CAACa,QAAjB,EAA2B,CAA3B,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAbF,CAFF,CADF,CADF;;AAuBAd,SAAS,CAACe,eAAV,GAA4B,MAAMC,GAAN,IAAa;AACvC,MAAI;AACF,UAAMf,EAAE,GAAG,MAAMV,OAAO,CACrB,MAAKyB,GAAG,CAACC,KAAJ,CAAUV,EAAV,IAAgB,OAAQ,EADR,EAEtB,sJAFsB,CAAxB;AAIA,WAAO;AACLN,MAAAA,EAAE;AAAIiB,QAAAA,OAAO,EAAE;AAAb,SAAsBjB,EAAtB;AADG,KAAP;AAGD,GARD,CAQE,OAAOkB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAZD;;AAcA,eAAenB,SAAf","sourcesContent":["import movieDB from '../../components/utility/movieDB';\r\nimport TopBilledCast from '../../components/ui/TopBilledCast';\r\nimport ReviewSection from '../../components/ui/ReviewSection';\r\nimport MediaSection from '../../components/ui/MediaSection';\r\nimport Layout from '../../components/layout';\r\nimport ProfileHeader from '../../components/ui/mediaProfile/ProfileHeader';\r\nimport RecommenSection from '../../components/ui/RecommenSection';\r\nimport ProfileStats from '../../components/ui/mediaProfile/ProfileStats/ProfileStats';\r\nimport MediaMainStyle from '../../components/ui/mediaProfile/mediaMainStyle';\r\n\r\nconst TvProfile = ({ tv }) => (\r\n  <Layout>\r\n    <MediaMainStyle className='profile' bgImg={tv.backdrop_path}>\r\n      <div className='profile--backdrop' />\r\n      <div className='profile--main'>\r\n        <ProfileHeader data={tv} bgImg={tv.backdrop_path} />\r\n        <div className='main-con'>\r\n          <TopBilledCast data={tv.credits.cast} />\r\n          <ReviewSection data={tv.reviews.results} movieId={tv.id} />\r\n          <MediaSection\r\n            videos={tv.videos.results}\r\n            posters={tv.images.posters}\r\n            backdrops={tv.images.backdrops}\r\n            typeId={tv.id}\r\n          />\r\n          <RecommenSection data={tv} />\r\n        </div>\r\n        <ProfileStats data={tv} keywords={Object.values(tv.keywords)[0]} />\r\n      </div>\r\n    </MediaMainStyle>\r\n  </Layout>\r\n);\r\n\r\nTvProfile.getInitialProps = async ctx => {\r\n  try {\r\n    const tv = await movieDB(\r\n      `tv/${ctx.query.id || '62688'}`,\r\n      'append_to_response=account_states,external_ids,keywords,content_ratings,videos,recommendations,reviews,credits,images&include_image_language=en,null'\r\n    );\r\n    return {\r\n      tv: { typeFor: 'tv', ...tv }\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default TvProfile;\r\n"]},"metadata":{},"sourceType":"module"}