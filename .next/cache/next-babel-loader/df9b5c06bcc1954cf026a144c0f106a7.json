{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\Pagination.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import React, { useContext } from 'react';\n// import styled from 'styled-components';\n// import MovieContext from '../context/MovieContext';\n// import Link from 'next/link';\n// const Styled = styled.nav`\n//   .pagination {\n//     justify-content: center;\n//     flex-wrap: wrap;\n//   }\n//   .page-link {\n//     color: var(--primary-clr);\n//     font-weight: bold;\n//     /* font-family: var(--primary--fn); */\n//     border: 1px solid var(--primary--clr);\n//     cursor: pointer;\n//     &:hover,\n//     &:focus,\n//     &.active {\n//       background-color: var(--primary--clr);\n//     }\n//   }\n//   /* .pagination  */\n//   .page-item + .page-item {\n//     margin-left: 0.8em;\n//   }\n//   .page-item {\n//     padding: 0.5em 0;\n//   }\n// `;\n// const Pagination = ({ total_pages, typeFor }) => {\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\n//   const pageNumbers = [];\n//     let prev = '';\n//     let next = '';\n//   for (let i = 1; i <= total_pages; i++) {\n//     pageNumbers.push(i);\n//     }\n//   return (\n//     <Styled className='pagination-nav'>\n//       <ul className='pagination'>\n//         {pageNumbers.length === 1\n//           ? ''\n//           : pageNumbers.map(number => (\n//               <li key={number} className='page-item'>\n//                 <Link href={typeFor + number}>\n//                   <div\n//                     onClick={() => paginate(number)}\n//                     className={`page-link ${\n//                       number === currentPage ? 'active' : ''\n//                     }`}\n//                   >\n//                     {number}\n//                   </div>\n//                 </Link>\n//               </li>\n//             ))}\n//       </ul>\n//     </Styled>\n//   );\n// };\n// export default Pagination;\n\n/* Pagination Component \r\n-------------------------------------------------*/\nconst propTypes = {\n  items: React.PropTypes.array.isRequired,\n  onChangePage: React.PropTypes.func.isRequired,\n  initialPage: React.PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pager: {}\n    };\n  }\n\n  componentWillMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // reset page if items array has changed\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    var items = this.props.items;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(items.length, page); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pageOfItems);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    var pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return __jsx(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => this.setPage(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"First\")), __jsx(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => this.setPage(pager.currentPage - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Previous\")), pager.pages.map((page, index) => __jsx(\"li\", {\n      key: index,\n      className: pager.currentPage === page ? 'active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => this.setPage(page),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, page))), __jsx(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => this.setPage(pager.currentPage + 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Next\")), __jsx(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: () => this.setPage(pager.totalPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Last\")));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/Pagination.jsx"],"names":["propTypes","items","React","PropTypes","array","isRequired","onChangePage","func","initialPage","number","defaultProps","Pagination","Component","constructor","props","state","pager","componentWillMount","length","setPage","componentDidUpdate","prevProps","prevState","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","totalItems","currentPage","pageSize","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","index"],"mappings":"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","sourcesContent":["// import React, { useContext } from 'react';\r\n// import styled from 'styled-components';\r\n// import MovieContext from '../context/MovieContext';\r\n// import Link from 'next/link';\r\n\r\n// const Styled = styled.nav`\r\n//   .pagination {\r\n//     justify-content: center;\r\n//     flex-wrap: wrap;\r\n//   }\r\n\r\n//   .page-link {\r\n//     color: var(--primary-clr);\r\n//     font-weight: bold;\r\n//     /* font-family: var(--primary--fn); */\r\n//     border: 1px solid var(--primary--clr);\r\n//     cursor: pointer;\r\n//     &:hover,\r\n//     &:focus,\r\n//     &.active {\r\n//       background-color: var(--primary--clr);\r\n//     }\r\n//   }\r\n\r\n//   /* .pagination  */\r\n\r\n//   .page-item + .page-item {\r\n//     margin-left: 0.8em;\r\n//   }\r\n\r\n//   .page-item {\r\n//     padding: 0.5em 0;\r\n//   }\r\n// `;\r\n\r\n// const Pagination = ({ total_pages, typeFor }) => {\r\n//   const { itemPerPage, paginate, currentPage } = useContext(MovieContext);\r\n\r\n//   const pageNumbers = [];\r\n\r\n//     let prev = '';\r\n\r\n//     let next = '';\r\n\r\n//   for (let i = 1; i <= total_pages; i++) {\r\n//     pageNumbers.push(i);\r\n//     }\r\n\r\n//   return (\r\n//     <Styled className='pagination-nav'>\r\n//       <ul className='pagination'>\r\n//         {pageNumbers.length === 1\r\n//           ? ''\r\n//           : pageNumbers.map(number => (\r\n//               <li key={number} className='page-item'>\r\n//                 <Link href={typeFor + number}>\r\n//                   <div\r\n//                     onClick={() => paginate(number)}\r\n//                     className={`page-link ${\r\n//                       number === currentPage ? 'active' : ''\r\n//                     }`}\r\n//                   >\r\n//                     {number}\r\n//                   </div>\r\n//                 </Link>\r\n//               </li>\r\n//             ))}\r\n//       </ul>\r\n//     </Styled>\r\n//   );\r\n// };\r\n\r\n// export default Pagination;\r\n\r\n/* Pagination Component \r\n-------------------------------------------------*/\r\n\r\nconst propTypes = {\r\n  items: React.PropTypes.array.isRequired,\r\n  onChangePage: React.PropTypes.func.isRequired,\r\n  initialPage: React.PropTypes.number\r\n};\r\n\r\nconst defaultProps = {\r\n  initialPage: 1\r\n};\r\n\r\nclass Pagination extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pager: {} };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // set page if items array isn't empty\r\n    if (this.props.items && this.props.items.length) {\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // reset page if items array has changed\r\n    if (this.props.items !== prevProps.items) {\r\n      this.setPage(this.props.initialPage);\r\n    }\r\n  }\r\n\r\n  setPage(page) {\r\n    var items = this.props.items;\r\n    var pager = this.state.pager;\r\n\r\n    if (page < 1 || page > pager.totalPages) {\r\n      return;\r\n    }\r\n\r\n    // get new pager object for specified page\r\n    pager = this.getPager(items.length, page);\r\n\r\n    // get new page of items from items array\r\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n    // update state\r\n    this.setState({ pager: pager });\r\n\r\n    // call change page function in parent component\r\n    this.props.onChangePage(pageOfItems);\r\n  }\r\n\r\n  getPager(totalItems, currentPage, pageSize) {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 10;\r\n\r\n    // calculate total pages\r\n    var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    var startPage, endPage;\r\n    if (totalPages <= 10) {\r\n      // less than 10 total pages so show all\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      // more than 10 total pages so calculate start and end pages\r\n      if (currentPage <= 6) {\r\n        startPage = 1;\r\n        endPage = 10;\r\n      } else if (currentPage + 4 >= totalPages) {\r\n        startPage = totalPages - 9;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - 5;\r\n        endPage = currentPage + 4;\r\n      }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    var startIndex = (currentPage - 1) * pageSize;\r\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      i => startPage + i\r\n    );\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: pageSize,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex,\r\n      pages: pages\r\n    };\r\n  }\r\n\r\n  render() {\r\n    var pager = this.state.pager;\r\n\r\n    if (!pager.pages || pager.pages.length <= 1) {\r\n      // don't display pager if there is only 1 page\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <ul className='pagination'>\r\n        <li className={pager.currentPage === 1 ? 'disabled' : ''}>\r\n          <a onClick={() => this.setPage(1)}>First</a>\r\n        </li>\r\n        <li className={pager.currentPage === 1 ? 'disabled' : ''}>\r\n          <a onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\r\n        </li>\r\n        {pager.pages.map((page, index) => (\r\n          <li\r\n            key={index}\r\n            className={pager.currentPage === page ? 'active' : ''}\r\n          >\r\n            <a onClick={() => this.setPage(page)}>{page}</a>\r\n          </li>\r\n        ))}\r\n        <li\r\n          className={pager.currentPage === pager.totalPages ? 'disabled' : ''}\r\n        >\r\n          <a onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\r\n        </li>\r\n        <li\r\n          className={pager.currentPage === pager.totalPages ? 'disabled' : ''}\r\n        >\r\n          <a onClick={() => this.setPage(pager.totalPages)}>Last</a>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = propTypes;\r\nPagination.defaultProps = defaultProps;\r\n"]},"metadata":{},"sourceType":"script"}