{"ast":null,"code":"// import nextConnect from 'next-connect';\n// import middleware from '../../server/middleware/database';\nimport connectDB from '../../server/config/db';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken'; // Joi validation\n\nimport { registerValidation } from '../../server/Validation'; // User Model\n\nimport User from '../../server/models/User';\nexport default (async (req, res) => {\n  await connectDB();\n  const {\n    method\n  } = req;\n\n  if (method === 'POST') {\n    console.log(req.body);\n\n    try {\n      const {\n        error\n      } = registerValidation(req.body);\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const {\n        userName,\n        email,\n        password\n      } = req.body;\n      let user = await User.findOne({\n        email\n      }); //   check is user exists\n\n      if (user) {\n        return res.status(400).json({\n          msg: 'User already exists'\n        });\n      } // create a new user\n\n\n      user = new User({\n        userName,\n        email,\n        password\n      }); // crpt password\n\n      const salt = await bcrypt.genSalt(10);\n      user.password = await bcrypt.hash(password, salt); // save user\n\n      await user.save();\n      const payload = {\n        user: {\n          id: user.id\n        }\n      }; // use json token\n\n      jwt.sign(payload, process.env.jwtSecret, {\n        expiresIn: 360000\n      }, (err, token) => {\n        if (err) throw err;\n        res.json({\n          token\n        });\n      });\n    } catch (e) {\n      res.status(500).json({\n        error: e.message || 'something went wrong'\n      });\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/user.js"],"names":["connectDB","bcrypt","jwt","registerValidation","User","req","res","method","console","log","body","error","status","json","msg","details","message","userName","email","password","user","findOne","salt","genSalt","hash","save","payload","id","sign","process","env","jwtSecret","expiresIn","err","token","e"],"mappings":"AAAA;AACA;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,yBAAnC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMN,SAAS,EAAf;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAaF,GAAnB;;AAEA,MAAIE,MAAM,KAAK,MAAf,EAAuB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAhB;;AACA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAYR,kBAAkB,CAACE,GAAG,CAACK,IAAL,CAApC;AACA,UAAIC,KAAJ,EAAW,OAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBC;AAAxB,OAArB,CAAP;AAEX,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,KAAZ;AAAmBC,QAAAA;AAAnB,UAAgCd,GAAG,CAACK,IAA1C;AAEA,UAAIU,IAAI,GAAG,MAAMhB,IAAI,CAACiB,OAAL,CAAa;AAAEH,QAAAA;AAAF,OAAb,CAAjB,CANE,CAQF;;AACA,UAAIE,IAAJ,EAAU;AACR,eAAOd,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAArB,CAAP;AACD,OAXC,CAYF;;;AACAM,MAAAA,IAAI,GAAG,IAAIhB,IAAJ,CAAS;AACda,QAAAA,QADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA;AAHc,OAAT,CAAP,CAbE,CAmBF;;AACA,YAAMG,IAAI,GAAG,MAAMrB,MAAM,CAACsB,OAAP,CAAe,EAAf,CAAnB;AACAH,MAAAA,IAAI,CAACD,QAAL,GAAgB,MAAMlB,MAAM,CAACuB,IAAP,CAAYL,QAAZ,EAAsBG,IAAtB,CAAtB,CArBE,CAsBF;;AACA,YAAMF,IAAI,CAACK,IAAL,EAAN;AACA,YAAMC,OAAO,GAAG;AACdN,QAAAA,IAAI,EAAE;AACJO,UAAAA,EAAE,EAAEP,IAAI,CAACO;AADL;AADQ,OAAhB,CAxBE,CA6BF;;AACAzB,MAAAA,GAAG,CAAC0B,IAAJ,CACEF,OADF,EAEEG,OAAO,CAACC,GAAR,CAAYC,SAFd,EAGE;AACEC,QAAAA,SAAS,EAAE;AADb,OAHF,EAME,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd,YAAID,GAAJ,EAAS,MAAMA,GAAN;AACT3B,QAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEqB,UAAAA;AAAF,SAAT;AACD,OATH;AAWD,KAzCD,CAyCE,OAAOC,CAAP,EAAU;AACV7B,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEF,QAAAA,KAAK,EAAEwB,CAAC,CAACnB,OAAF,IAAa;AAAtB,OAArB;AACD;AACF;AACF,CAnDD","sourcesContent":["// import nextConnect from 'next-connect';\r\n// import middleware from '../../server/middleware/database';\r\nimport connectDB from '../../server/config/db';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n// Joi validation\r\nimport { registerValidation } from '../../server/Validation';\r\n// User Model\r\nimport User from '../../server/models/User';\r\n\r\nexport default async (req, res) => {\r\n  await connectDB();\r\n  const { method } = req;\r\n\r\n  if (method === 'POST') {\r\n    console.log(req.body);\r\n    try {\r\n      const { error } = registerValidation(req.body);\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const { userName, email, password } = req.body;\r\n\r\n      let user = await User.findOne({ email });\r\n\r\n      //   check is user exists\r\n      if (user) {\r\n        return res.status(400).json({ msg: 'User already exists' });\r\n      }\r\n      // create a new user\r\n      user = new User({\r\n        userName,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      // crpt password\r\n      const salt = await bcrypt.genSalt(10);\r\n      user.password = await bcrypt.hash(password, salt);\r\n      // save user\r\n      await user.save();\r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n      // use json token\r\n      jwt.sign(\r\n        payload,\r\n        process.env.jwtSecret,\r\n        {\r\n          expiresIn: 360000,\r\n        },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n    } catch (e) {\r\n      res.status(500).json({ error: e.message || 'something went wrong' });\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}