{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\pages\\\\discover\\\\index.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport movieDB from '../../components/utility/movieDB';\nimport MediaSection from '../../components/ui/mediaProfile/MediaSection';\nimport { useContext } from 'react';\nimport MovieContext from '../../components/context/MovieContext';\n\nconst discover = ({\n  discover\n}) => {\n  console.log(discover);\n  return __jsx(MediaSection, {\n    mediaFor: discover,\n    forPage: \"disc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  });\n};\n\ndiscover.getInitialProps = async ({\n  query\n}) => {\n  const {\n    currentPage\n  } = useContext(MovieContext);\n  console.log('from contex', currentPage);\n  const page = `&page=${query.page ? query.page : 1}`;\n  const sort_by = `sort_by=${query.sort_by ? query.sort_by : 'popularity.desc'}`;\n  const year = `&year=${query.year ? query.year : ''}`;\n  const genres = `&with_genres=${query.genres ? query.genres : ''}`;\n  const keywords = `&with_keywords=${query.keywords ? query.keywords : ''}`;\n\n  try {\n    const discover = await movieDB(`discover/${query.query}`, `${sort_by}${year}${genres}${keywords}${page}`);\n    return {\n      discover: _objectSpread({\n        typeFor: query.query,\n        title: query.query\n      }, discover)\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default discover;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/discover/index.jsx"],"names":["React","movieDB","MediaSection","useContext","MovieContext","discover","console","log","getInitialProps","query","currentPage","page","sort_by","year","genres","keywords","typeFor","title","error"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAkB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,SAAO,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEA,QAAxB;AAAkC,IAAA,OAAO,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAJD;;AAMAA,QAAQ,CAACG,eAAT,GAA2B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAkBP,UAAU,CAACC,YAAD,CAAlC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,WAA3B;AACA,QAAMC,IAAI,GAAI,SAAQF,KAAK,CAACE,IAAN,GAAaF,KAAK,CAACE,IAAnB,GAA0B,CAAE,EAAlD;AACA,QAAMC,OAAO,GAAI,WACfH,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAtB,GAAgC,iBACjC,EAFD;AAGA,QAAMC,IAAI,GAAI,SAAQJ,KAAK,CAACI,IAAN,GAAaJ,KAAK,CAACI,IAAnB,GAA0B,EAAG,EAAnD;AACA,QAAMC,MAAM,GAAI,gBAAeL,KAAK,CAACK,MAAN,GAAeL,KAAK,CAACK,MAArB,GAA8B,EAAG,EAAhE;AACA,QAAMC,QAAQ,GAAI,kBAAiBN,KAAK,CAACM,QAAN,GAAiBN,KAAK,CAACM,QAAvB,GAAkC,EAAG,EAAxE;;AACA,MAAI;AACF,UAAMV,QAAQ,GAAG,MAAMJ,OAAO,CAC3B,YAAWQ,KAAK,CAACA,KAAM,EADI,EAE3B,GAAEG,OAAQ,GAAEC,IAAK,GAAEC,MAAO,GAAEC,QAAS,GAAEJ,IAAK,EAFjB,CAA9B;AAIA,WAAO;AACLN,MAAAA,QAAQ;AACNW,QAAAA,OAAO,EAAEP,KAAK,CAACA,KADT;AAENQ,QAAAA,KAAK,EAAER,KAAK,CAACA;AAFP,SAGHJ,QAHG;AADH,KAAP;AAOD,GAZD,CAYE,OAAOa,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF,CA1BD;;AA4BA,eAAeb,QAAf","sourcesContent":["import React from 'react';\r\nimport movieDB from '../../components/utility/movieDB';\r\nimport MediaSection from '../../components/ui/mediaProfile/MediaSection';\r\nimport { useContext } from 'react';\r\nimport MovieContext from '../../components/context/MovieContext';\r\n\r\nconst discover = ({ discover }) => {\r\n  console.log(discover);\r\n\r\n  return <MediaSection mediaFor={discover} forPage='disc' />;\r\n};\r\n\r\ndiscover.getInitialProps = async ({ query }) => {\r\n  const { currentPage } = useContext(MovieContext);\r\n\r\n  console.log('from contex', currentPage);\r\n  const page = `&page=${query.page ? query.page : 1}`;\r\n  const sort_by = `sort_by=${\r\n    query.sort_by ? query.sort_by : 'popularity.desc'\r\n  }`;\r\n  const year = `&year=${query.year ? query.year : ''}`;\r\n  const genres = `&with_genres=${query.genres ? query.genres : ''}`;\r\n  const keywords = `&with_keywords=${query.keywords ? query.keywords : ''}`;\r\n  try {\r\n    const discover = await movieDB(\r\n      `discover/${query.query}`,\r\n      `${sort_by}${year}${genres}${keywords}${page}`\r\n    );\r\n    return {\r\n      discover: {\r\n        typeFor: query.query,\r\n        title: query.query,\r\n        ...discover\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport default discover;\r\n"]},"metadata":{},"sourceType":"module"}