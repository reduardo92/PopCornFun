{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_MODAL_MEDIA, RESET_MODAL_MEDIA, SET_MEDIADATA, CLEAR_MEDIADATA } from './types';\n\nvar useMovieReducer = function useMovieReducer(state, action) {\n  switch (action.type) {\n    // Set Media for tv & movie profile\n    case SET_MEDIADATA:\n      return _objectSpread({}, state, {\n        mediaProfile: action.payload\n      });\n    // Clear Media for tv & movie profile\n\n    case CLEAR_MEDIADATA:\n      return _objectSpread({}, state, {\n        mediaProfile: null\n      });\n    // Set Modal Media\n\n    case SET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: action.payload,\n          toggle: true,\n          \"for\": action.typeFor\n        }\n      });\n    // Clear Modal Media\n\n    case RESET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: null,\n          toggle: false,\n          \"for\": null\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default useMovieReducer;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/context/useMovieReducer.js"],"names":["SET_MODAL_MEDIA","RESET_MODAL_MEDIA","SET_MEDIADATA","CLEAR_MEDIADATA","useMovieReducer","state","action","type","mediaProfile","payload","isModal","media","toggle","typeFor"],"mappings":";;;;;;;;;;;;AAAA,SACEA,eADF,EAEEC,iBAFF,EAGEC,aAHF,EAIEC,eAJF,QAKO,SALP;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKL,aAAL;AACE,+BACKG,KADL;AAEEG,QAAAA,YAAY,EAAEF,MAAM,CAACG;AAFvB;AAIF;;AACA,SAAKN,eAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,YAAY,EAAE;AAFhB;AAIF;;AACA,SAAKR,eAAL;AACE,+BACKK,KADL;AAEEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEL,MAAM,CAACG,OAAhB;AAAyBG,UAAAA,MAAM,EAAE,IAAjC;AAAuC,iBAAKN,MAAM,CAACO;AAAnD;AAFX;AAIF;;AACA,SAAKZ,iBAAL;AACE,+BACKI,KADL;AAEEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,MAAM,EAAE,KAAvB;AAA8B,iBAAK;AAAnC;AAFX;;AAKF;AACE,aAAOP,KAAP;AA3BJ;AA6BD,CA9BD;;AAgCA,eAAeD,eAAf","sourcesContent":["import {\r\n  SET_MODAL_MEDIA,\r\n  RESET_MODAL_MEDIA,\r\n  SET_MEDIADATA,\r\n  CLEAR_MEDIADATA\r\n} from './types';\r\n\r\nconst useMovieReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Set Media for tv & movie profile\r\n    case SET_MEDIADATA:\r\n      return {\r\n        ...state,\r\n        mediaProfile: action.payload\r\n      };\r\n    // Clear Media for tv & movie profile\r\n    case CLEAR_MEDIADATA:\r\n      return {\r\n        ...state,\r\n        mediaProfile: null\r\n      };\r\n    // Set Modal Media\r\n    case SET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: action.payload, toggle: true, for: action.typeFor }\r\n      };\r\n    // Clear Modal Media\r\n    case RESET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: null, toggle: false, for: null }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default useMovieReducer;\r\n"]},"metadata":{},"sourceType":"module"}