{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\mediaProfile\\\\ProfileStats\\\\ReleaseContent.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { TiWorld } from 'react-icons/ti';\nimport { IMG_URL } from '../../../context/types';\nimport setDateFormat from '../../../utility/setDateFormat';\n\nconst ReleaseContent = ({\n  data,\n  typeFor\n}) => {\n  const getReleaseType = {\n    1: 'Premiere',\n    2: 'Theatrical (limited)',\n    3: 'Theatrical',\n    4: 'Digital',\n    5: 'Physical',\n    6: 'Tv'\n  };\n  const networks = data.typeFor === 'tv' && data.networks.map(netWork => __jsx(Link, {\n    key: netWork.id,\n    href: \"/network/[id]\",\n    as: `/network/${netWork.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: \"network--logo\",\n    src: `${IMG_URL}${netWork.logo_path}`,\n    alt: netWork.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })));\n  const setData = Object.values(data[data.typeFor === 'tv' ? 'content_ratings' : 'release_dates'].results.filter(item => item.iso_3166_1 === 'US')[0]);\n  console.log(setData);\n  return __jsx(\"ul\", {\n    className: \"release--content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, networks, data.typeFor === 'tv' && __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Certification\"), data.typeFor === 'tv' ? __jsx(\"div\", {\n    className: \"release--date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(TiWorld, {\n    className: \"world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    className: \"rate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, data.typeFor === 'tv' && setData)) : setData.map(item => __jsx(\"li\", {\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"release--date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(TiWorld, {\n    className: \"world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"certification\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"rate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, item.certification), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, getReleaseType[item.type])))));\n};\n\nexport default ReleaseContent;\n{\n  /* <li key={i}>\r\n  <div className='release--date'>\r\n  <TiWorld className='world' />\r\n  <span className='stat--subtext'>\r\n    {setDateFormat(item.release_date.slice(0, 10))}\r\n  </span>\r\n  </div>\r\n  <div className='certification'>\r\n  <span className='rate'>{item.certification}</span>\r\n  <span className='stat--subtext'>{getReleaseType[item.type]}</span>\r\n  </div>\r\n  </li> */\n}","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/mediaProfile/ProfileStats/ReleaseContent.jsx"],"names":["React","Link","TiWorld","IMG_URL","setDateFormat","ReleaseContent","data","typeFor","getReleaseType","networks","map","netWork","id","logo_path","name","setData","Object","values","results","filter","item","iso_3166_1","console","log","certification","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Link from 'next/link';\r\nimport { TiWorld } from 'react-icons/ti';\r\nimport { IMG_URL } from '../../../context/types';\r\nimport setDateFormat from '../../../utility/setDateFormat';\r\n\r\nconst ReleaseContent = ({ data, typeFor }) => {\r\n  const getReleaseType = {\r\n    1: 'Premiere',\r\n    2: 'Theatrical (limited)',\r\n    3: 'Theatrical',\r\n    4: 'Digital',\r\n    5: 'Physical',\r\n    6: 'Tv'\r\n  };\r\n\r\n  const networks =\r\n    data.typeFor === 'tv' &&\r\n    data.networks.map(netWork => (\r\n      <Link key={netWork.id} href='/network/[id]' as={`/network/${netWork.id}`}>\r\n        <img\r\n          className='network--logo'\r\n          src={`${IMG_URL}${netWork.logo_path}`}\r\n          alt={netWork.name}\r\n        />\r\n      </Link>\r\n    ));\r\n\r\n  const setData = Object.values(\r\n    data[\r\n      data.typeFor === 'tv' ? 'content_ratings' : 'release_dates'\r\n    ].results.filter(item => item.iso_3166_1 === 'US')[0]\r\n  );\r\n\r\n  console.log(setData);\r\n\r\n  return (\r\n    <ul className='release--content'>\r\n      {networks}\r\n      {data.typeFor === 'tv' && <p className='stat--title'>Certification</p>}\r\n      {data.typeFor === 'tv' ? (\r\n        <div className='release--date'>\r\n          <TiWorld className='world' />\r\n          <span className='rate'>{data.typeFor === 'tv' && setData}</span>\r\n        </div>\r\n      ) : (\r\n        setData.map(item => (\r\n          <li key={item.id}>\r\n            <div className='release--date'>\r\n              <TiWorld className='world' />\r\n              <span className='stat--subtext'>\r\n                {/* {setDateFormat(item.release_date.slice(0, 10))} */}\r\n              </span>\r\n            </div>\r\n            <div className='certification'>\r\n              <span className='rate'>{item.certification}</span>\r\n              <span className='stat--subtext'>{getReleaseType[item.type]}</span>\r\n            </div>\r\n          </li>\r\n        ))\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ReleaseContent;\r\n\r\n{\r\n  /* <li key={i}>\r\n<div className='release--date'>\r\n  <TiWorld className='world' />\r\n  <span className='stat--subtext'>\r\n    {setDateFormat(item.release_date.slice(0, 10))}\r\n  </span>\r\n</div>\r\n<div className='certification'>\r\n  <span className='rate'>{item.certification}</span>\r\n  <span className='stat--subtext'>{getReleaseType[item.type]}</span>\r\n</div>\r\n</li> */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}