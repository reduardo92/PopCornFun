{"ast":null,"code":"import { verify } from 'jsonwebtoken';\nimport Cors from 'cors';\nimport { runMiddleware } from './cors'; // Initializing the cors middleware\n\nconst cors = Cors({\n  methods: ['GET', 'HEAD']\n});\n\nconst auth = fn => async (req, res) => {\n  await runMiddleware(req, res, cors);\n  const {\n    cookies,\n    method,\n    url\n  } = req;\n\n  if (method === 'POST' && url === '/api/auth') {\n    return await fn(req, res);\n  }\n\n  try {\n    verify(cookies.auth, process.env.jwtSecret, async (err, decoded) => {\n      if (!err && decoded) {\n        req.user = decoded.user;\n        return await fn(req, res);\n      }\n\n      return res.status(401).json({\n        msg: 'No token, authorization denied'\n      });\n    });\n  } catch (error) {\n    res.status(401).json({\n      msg: 'token is not valid'\n    });\n  }\n};\n\nexport default auth; // const auth = (fn) => async(req, res) => {\n//   // Get token from header\n//   const token = req.headers['x-auth-token'];\n//   // Check if not token\n//   if (!token) {\n//     return res.status(401).json({ msg: 'No token, authorization denied' });\n//   }\n//   try {\n//     const decoded = jwt.verify(token, process.env.jwtSecret);\n//     req.user = decoded.user;\n//     return await fn(req, res);\n//   } catch (err) {\n//     res.status(401).json({ msg: 'token is not valid' });\n//   }\n// };\n// export default auth;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/server/middleware/auth.js"],"names":["verify","Cors","runMiddleware","cors","methods","auth","fn","req","res","cookies","method","url","process","env","jwtSecret","err","decoded","user","status","json","msg","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,QAA9B,C,CAEA;;AACA,MAAMC,IAAI,GAAGF,IAAI,CAAC;AAChBG,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AADO,CAAD,CAAjB;;AAIA,MAAMC,IAAI,GAAIC,EAAD,IAAQ,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvC,QAAMN,aAAa,CAACK,GAAD,EAAMC,GAAN,EAAWL,IAAX,CAAnB;AAEA,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,MAA2BJ,GAAjC;;AACA,MAAIG,MAAM,KAAK,MAAX,IAAqBC,GAAG,KAAK,WAAjC,EAA8C;AAC5C,WAAO,MAAML,EAAE,CAACC,GAAD,EAAMC,GAAN,CAAf;AACD;;AACD,MAAI;AACFR,IAAAA,MAAM,CAACS,OAAO,CAACJ,IAAT,EAAeO,OAAO,CAACC,GAAR,CAAYC,SAA3B,EAAsC,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAClE,UAAI,CAACD,GAAD,IAAQC,OAAZ,EAAqB;AACnBT,QAAAA,GAAG,CAACU,IAAJ,GAAWD,OAAO,CAACC,IAAnB;AACA,eAAO,MAAMX,EAAE,CAACC,GAAD,EAAMC,GAAN,CAAf;AACD;;AACD,aAAOA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAArB,CAAP;AACD,KANK,CAAN;AAOD,GARD,CAQE,OAAOC,KAAP,EAAc;AACdb,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB;AACD;AACF,CAlBD;;AAmBA,eAAef,IAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { verify } from 'jsonwebtoken';\r\nimport Cors from 'cors';\r\nimport { runMiddleware } from './cors';\r\n\r\n// Initializing the cors middleware\r\nconst cors = Cors({\r\n  methods: ['GET', 'HEAD'],\r\n});\r\n\r\nconst auth = (fn) => async (req, res) => {\r\n  await runMiddleware(req, res, cors);\r\n\r\n  const { cookies, method, url } = req;\r\n  if (method === 'POST' && url === '/api/auth') {\r\n    return await fn(req, res);\r\n  }\r\n  try {\r\n    verify(cookies.auth, process.env.jwtSecret, async (err, decoded) => {\r\n      if (!err && decoded) {\r\n        req.user = decoded.user;\r\n        return await fn(req, res);\r\n      }\r\n      return res.status(401).json({ msg: 'No token, authorization denied' });\r\n    });\r\n  } catch (error) {\r\n    res.status(401).json({ msg: 'token is not valid' });\r\n  }\r\n};\r\nexport default auth;\r\n\r\n// const auth = (fn) => async(req, res) => {\r\n//   // Get token from header\r\n//   const token = req.headers['x-auth-token'];\r\n\r\n//   // Check if not token\r\n//   if (!token) {\r\n//     return res.status(401).json({ msg: 'No token, authorization denied' });\r\n//   }\r\n\r\n//   try {\r\n//     const decoded = jwt.verify(token, process.env.jwtSecret);\r\n//     req.user = decoded.user;\r\n//     return await fn(req, res);\r\n\r\n//   } catch (err) {\r\n//     res.status(401).json({ msg: 'token is not valid' });\r\n//   }\r\n// };\r\n// export default auth;\r\n"]},"metadata":{},"sourceType":"module"}