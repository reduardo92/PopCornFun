{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_MODAL_MEDIA, RESET_MODAL_MEDIA } from './types';\n\nconst useMovieReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DATA':\n      return _objectSpread({}, state, {\n        movieDBData: action.payload\n      });\n\n    case SET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: action.payload,\n          toggle: true\n        }\n      });\n\n    case RESET_MODAL_MEDIA:\n      return _objectSpread({}, state, {\n        isModal: {\n          media: null,\n          toggle: false\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default useMovieReducer;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/context/useMovieReducer.js"],"names":["SET_MODAL_MEDIA","RESET_MODAL_MEDIA","useMovieReducer","state","action","type","movieDBData","payload","isModal","media","toggle"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,iBAA1B,QAAmD,SAAnD;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,+BACKF,KADL;AAEEG,QAAAA,WAAW,EAAEF,MAAM,CAACG;AAFtB;;AAIF,SAAKP,eAAL;AACE,+BACKG,KADL;AAEEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEL,MAAM,CAACG,OAAhB;AAAyBG,UAAAA,MAAM,EAAE;AAAjC;AAFX;;AAIF,SAAKT,iBAAL;AACE,+BACKE,KADL;AAEEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,MAAM,EAAE;AAAvB;AAFX;;AAKF;AACE,aAAOP,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,eAAeD,eAAf","sourcesContent":["import { SET_MODAL_MEDIA, RESET_MODAL_MEDIA } from './types';\r\n\r\nconst useMovieReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_DATA':\r\n      return {\r\n        ...state,\r\n        movieDBData: action.payload\r\n      };\r\n    case SET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: action.payload, toggle: true }\r\n      };\r\n    case RESET_MODAL_MEDIA:\r\n      return {\r\n        ...state,\r\n        isModal: { media: null, toggle: false }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default useMovieReducer;\r\n"]},"metadata":{},"sourceType":"module"}