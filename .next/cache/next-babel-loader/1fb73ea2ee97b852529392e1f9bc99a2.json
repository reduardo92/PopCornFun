{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\components\\\\ui\\\\mediaProfile\\\\ProfileStats\\\\Facts.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport timeConvert from '../../../utility/timeConvert';\nimport numberWithCommas from '../../../utility/numberWithCommas';\nimport ReleaseContent from './ReleaseContent';\nconst Styled = styled.div.withConfig({\n  displayName: \"Facts__Styled\",\n  componentId: \"a62vcl-0\"\n})([\".release--content{display:grid;grid-row-gap:1em;& >:first-child{margin-top:0.5em;}}.release--date,.certification{display:flex;align-items:center;justify-content:start;& >:first-child{margin-right:0.5em;}}.world{font-size:1.5rem;path{color:#535353;}}.rate{border-radius:2px;background-color:var(--primary-clr);color:#fff;padding:0.15em 0.5em;font-size:0.8rem;border-radius:5px;}.network--logo{width:60px;}\"]);\n\nconst Facts = ({\n  data\n}) => {\n  return __jsx(Styled, {\n    className: \"profile--stats--facts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Facts\"), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Status\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, data.status)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, data.release_dates ? 'Release Information' : 'Networks'), __jsx(ReleaseContent, {\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), data.typeFor === 'tv' && __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Type\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, data.type)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Original Language\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, data.original_language)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Runtime\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, timeConvert(data.runtime || data.episode_run_time[0]))), data.typeFor === 'tv' ? null : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Budget\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, data.budget === 0 ? 'N/A' : `$${numberWithCommas(data.budget)}`)), __jsx(\"div\", {\n    className: \"stat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"stat--title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Revenue\"), __jsx(\"span\", {\n    className: \"stat--subtext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, data.revenue === 0 ? 'N/A' : `$${numberWithCommas(data.revenue)}`))));\n};\n\nexport default Facts; // .release_dates.map((item, i) => (\n//   <li key={i}>\n//     <div className='release--date'>\n//       <TiWorld className='world' />\n//       <span className='stat--subtext'>\n//         {setDateFormat(item.release_date.slice(0, 10))}\n//       </span>\n//     </div>\n//     <div className='certification'>\n//       <span className='rate'>{item.certification}</span>\n//       <span className='stat--subtext'>\n//         {getReleaseType[item.type]}\n//       </span>\n//     </div>\n//   </li>","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/ui/mediaProfile/ProfileStats/Facts.jsx"],"names":["React","styled","timeConvert","numberWithCommas","ReleaseContent","Styled","div","Facts","data","status","release_dates","typeFor","type","original_language","runtime","episode_run_time","budget","revenue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport timeConvert from '../../../utility/timeConvert';\r\nimport numberWithCommas from '../../../utility/numberWithCommas';\r\nimport ReleaseContent from './ReleaseContent';\r\n\r\nconst Styled = styled.div`\r\n  .release--content {\r\n    display: grid;\r\n    grid-row-gap: 1em;\r\n\r\n    & > :first-child {\r\n      margin-top: 0.5em;\r\n    }\r\n  }\r\n\r\n  .release--date,\r\n  .certification {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: start;\r\n\r\n    & > :first-child {\r\n      margin-right: 0.5em;\r\n    }\r\n  }\r\n\r\n  .world {\r\n    font-size: 1.5rem;\r\n\r\n    path {\r\n      color: #535353;\r\n    }\r\n  }\r\n\r\n  .rate {\r\n    border-radius: 2px;\r\n    background-color: var(--primary-clr);\r\n    color: #fff;\r\n    padding: 0.15em 0.5em;\r\n    font-size: 0.8rem;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  .network--logo {\r\n    width: 60px;\r\n  }\r\n`;\r\n\r\nconst Facts = ({ data }) => {\r\n  return (\r\n    <Styled className='profile--stats--facts'>\r\n      <h3 className='title'>Facts</h3>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Status</p>\r\n        <span className='stat--subtext'>{data.status}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>\r\n          {data.release_dates ? 'Release Information' : 'Networks'}\r\n        </p>\r\n        <ReleaseContent data={data} />\r\n      </div>\r\n      {data.typeFor === 'tv' && (\r\n        <div className='stat'>\r\n          <p className='stat--title'>Type</p>\r\n          <span className='stat--subtext'>{data.type}</span>\r\n        </div>\r\n      )}\r\n      <div className='stat'>\r\n        <p className='stat--title'>Original Language</p>\r\n        <span className='stat--subtext'>{data.original_language}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Runtime</p>\r\n        <span className='stat--subtext'>\r\n          {timeConvert(data.runtime || data.episode_run_time[0])}\r\n        </span>\r\n      </div>\r\n      {data.typeFor === 'tv' ? null : (\r\n        <>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Budget</p>\r\n            <span className='stat--subtext'>\r\n              {data.budget === 0 ? 'N/A' : `$${numberWithCommas(data.budget)}`}\r\n            </span>\r\n          </div>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Revenue</p>\r\n            <span className='stat--subtext'>\r\n              {data.revenue === 0\r\n                ? 'N/A'\r\n                : `$${numberWithCommas(data.revenue)}`}\r\n            </span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Styled>\r\n  );\r\n};\r\n\r\nexport default Facts;\r\n\r\n// .release_dates.map((item, i) => (\r\n//   <li key={i}>\r\n//     <div className='release--date'>\r\n//       <TiWorld className='world' />\r\n//       <span className='stat--subtext'>\r\n//         {setDateFormat(item.release_date.slice(0, 10))}\r\n//       </span>\r\n//     </div>\r\n//     <div className='certification'>\r\n//       <span className='rate'>{item.certification}</span>\r\n//       <span className='stat--subtext'>\r\n//         {getReleaseType[item.type]}\r\n//       </span>\r\n//     </div>\r\n//   </li>\r\n"]},"metadata":{},"sourceType":"module"}