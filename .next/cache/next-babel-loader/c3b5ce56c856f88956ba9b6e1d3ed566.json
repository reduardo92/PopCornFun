{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport { favoriteValidation } from '../../server/Validation';\nimport Favorite from '../../server/models/Favorite';\nexport default (async (req, res) => {\n  await connectDB();\n  await auth(req, res);\n  const {\n    method\n  } = req;\n  console.log(req.user.id);\n\n  switch (method) {\n    // @route   GET api/favorite\n    // @desc    Get all Favorite Media\n    // @access  Private\n    case 'GET':\n      try {\n        const favorite = await Favorite.find({\n          user: req.user.id\n        }).sort({\n          date: -1\n        });\n        res.json(favorite);\n      } catch (err) {\n        console.log(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'POST':\n      // @route   POST api/favorite\n      // @desc    add new favorite\n      // @access  Private\n      const {\n        error\n      } = favoriteValidation(req.body);\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const {\n        media\n      } = req.body;\n\n      try {\n        const newFavorite = new Favorite({\n          media,\n          user: req.user.id\n        });\n        const favorite = await newFavorite.save();\n        res.json(favorite);\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'DELETE':\n      // @route   DELETE api/favorite/:id\n      // @desc    Delete favorite\n      // @access  Private\n      try {\n        let favorite = await Favorite.findById(req.params.id);\n        if (!favorite) return res.status(400).json({\n          msg: 'Favorite not found'\n        }); // Make sure user owns favorite\n\n        if (favorite.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        await Favorite.findByIdAndRemove(req.params.id);\n        res.json({\n          msg: 'Favorite removed'\n        });\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    default:\n      return res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/favorites.js"],"names":["auth","connectDB","favoriteValidation","Favorite","req","res","method","console","log","user","id","favorite","find","sort","date","json","err","message","status","send","error","body","msg","details","media","newFavorite","save","findById","params","toString","findByIdAndRemove","end"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport { favoriteValidation } from '../../server/Validation';\r\nimport Favorite from '../../server/models/Favorite';\r\n\r\nexport default async (req, res) => {\r\n  await connectDB();\r\n  await auth(req, res);\r\n  const { method } = req;\r\n\r\n  console.log(req.user.id);\r\n  switch (method) {\r\n    // @route   GET api/favorite\r\n    // @desc    Get all Favorite Media\r\n    // @access  Private\r\n    case 'GET':\r\n      try {\r\n        const favorite = await Favorite.find({ user: req.user.id }).sort({\r\n          date: -1,\r\n        });\r\n        res.json(favorite);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'POST':\r\n      // @route   POST api/favorite\r\n      // @desc    add new favorite\r\n      // @access  Private\r\n      const { error } = favoriteValidation(req.body);\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const { media } = req.body;\r\n\r\n      try {\r\n        const newFavorite = new Favorite({ media, user: req.user.id });\r\n\r\n        const favorite = await newFavorite.save();\r\n\r\n        res.json(favorite);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'DELETE':\r\n      // @route   DELETE api/favorite/:id\r\n      // @desc    Delete favorite\r\n      // @access  Private\r\n      try {\r\n        let favorite = await Favorite.findById(req.params.id);\r\n\r\n        if (!favorite)\r\n          return res.status(400).json({ msg: 'Favorite not found' });\r\n\r\n        // Make sure user owns favorite\r\n        if (favorite.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n\r\n        await Favorite.findByIdAndRemove(req.params.id);\r\n\r\n        res.json({ msg: 'Favorite removed' });\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    default:\r\n      return res.status(405).end(`Method ${method} Not Allowed`);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}