{"ast":null,"code":"import auth from '../../server/middleware/auth';\nimport connectDB from '../../server/config/db';\nimport { RatingValidation } from '../../server/Validation';\nimport Ratings from '../../server/models/Ratings';\nexport default auth(async (req, res) => {\n  await connectDB();\n  const {\n    method,\n    query\n  } = req;\n  const {\n    media_id,\n    rating\n  } = req.body;\n  const {\n    error\n  } = RatingValidation(req.body);\n\n  switch (method) {\n    // @route   GET api/ratings\n    // @desc    Get all Ratings Media\n    // @access  Private\n    case 'GET':\n      try {\n        const ratings = await Ratings.find({\n          user: req.user.id\n        }).sort({\n          date: -1\n        });\n        res.json(ratings);\n      } catch (err) {\n        console.log(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'POST':\n      // @route   POST api/ratings\n      // @desc    add new ratings\n      // @access  Private\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n\n      try {\n        const newRating = new Ratings({\n          media_id,\n          rating,\n          user: req.user.id\n        });\n        const ratings = await newRating.save();\n        res.json(ratings);\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'PUT':\n      // @route   PUT api/ratings/:id\n      // @desc    Update ratings\n      // @access  Private\n      // Build ratings object\n      if (error) return res.status(400).json({\n        msg: error.details[0].message\n      });\n      const ratingsFields = {};\n      if (media_id) ratingsFields.media_id = media_id;\n      if (rating) ratingsFields.rating = rating;\n\n      try {\n        let ratings = await Ratings.findById(query.id);\n        if (!ratings) return res.status(400).json({\n          msg: 'Ratings not found'\n        }); // Make sure user owns ratings\n\n        if (ratings.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        ratings = await Ratings.findByIdAndUpdate(query.id, {\n          $set: ratingsFields\n        }, {\n          new: true\n        });\n        res.json({\n          ratings,\n          msg: 'Rating updated'\n        });\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    case 'DELETE':\n      // @route   DELETE api/ratings/:id\n      // @desc    Delete ratings\n      // @access  Private\n      try {\n        let ratings = await Ratings.findById(query.id);\n        if (!ratings) return res.status(400).json({\n          msg: 'Ratings not found'\n        }); // Make sure user owns ratings\n\n        if (ratings.user.toString() !== req.user.id) {\n          return res.status(401).json({\n            msg: 'Not authorized'\n          });\n        }\n\n        await Ratings.findByIdAndRemove(query.id);\n        res.json({\n          msg: 'Ratings removed'\n        });\n      } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server Error');\n      }\n\n      break;\n\n    default:\n      console.log('defa', method, query);\n      return res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/api/ratings.js"],"names":["auth","connectDB","RatingValidation","Ratings","req","res","method","query","media_id","rating","body","error","ratings","find","user","id","sort","date","json","err","console","log","message","status","send","msg","details","newRating","save","ratingsFields","findById","toString","findByIdAndUpdate","$set","new","findByIdAndRemove","end"],"mappings":"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","sourcesContent":["import auth from '../../server/middleware/auth';\r\nimport connectDB from '../../server/config/db';\r\nimport { RatingValidation } from '../../server/Validation';\r\n\r\nimport Ratings from '../../server/models/Ratings';\r\n\r\nexport default auth(async (req, res) => {\r\n  await connectDB();\r\n\r\n  const { method, query } = req;\r\n\r\n  const { media_id, rating } = req.body;\r\n\r\n  const { error } = RatingValidation(req.body);\r\n\r\n  switch (method) {\r\n    // @route   GET api/ratings\r\n    // @desc    Get all Ratings Media\r\n    // @access  Private\r\n    case 'GET':\r\n      try {\r\n        const ratings = await Ratings.find({ user: req.user.id }).sort({\r\n          date: -1,\r\n        });\r\n        res.json(ratings);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'POST':\r\n      // @route   POST api/ratings\r\n      // @desc    add new ratings\r\n      // @access  Private\r\n\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      try {\r\n        const newRating = new Ratings({\r\n          media_id,\r\n          rating,\r\n          user: req.user.id,\r\n        });\r\n\r\n        const ratings = await newRating.save();\r\n\r\n        res.json(ratings);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    case 'PUT':\r\n      // @route   PUT api/ratings/:id\r\n      // @desc    Update ratings\r\n      // @access  Private\r\n\r\n      // Build ratings object\r\n      if (error) return res.status(400).json({ msg: error.details[0].message });\r\n\r\n      const ratingsFields = {};\r\n      if (media_id) ratingsFields.media_id = media_id;\r\n      if (rating) ratingsFields.rating = rating;\r\n      try {\r\n        let ratings = await Ratings.findById(query.id);\r\n\r\n        if (!ratings) return res.status(400).json({ msg: 'Ratings not found' });\r\n\r\n        // Make sure user owns ratings\r\n        if (ratings.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n\r\n        ratings = await Ratings.findByIdAndUpdate(\r\n          query.id,\r\n          { $set: ratingsFields },\r\n          { new: true }\r\n        );\r\n\r\n        res.json({ ratings, msg: 'Rating updated' });\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n\r\n    case 'DELETE':\r\n      // @route   DELETE api/ratings/:id\r\n      // @desc    Delete ratings\r\n      // @access  Private\r\n      try {\r\n        let ratings = await Ratings.findById(query.id);\r\n\r\n        if (!ratings) return res.status(400).json({ msg: 'Ratings not found' });\r\n\r\n        // Make sure user owns ratings\r\n        if (ratings.user.toString() !== req.user.id) {\r\n          return res.status(401).json({ msg: 'Not authorized' });\r\n        }\r\n\r\n        await Ratings.findByIdAndRemove(query.id);\r\n\r\n        res.json({ msg: 'Ratings removed' });\r\n      } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n      }\r\n      break;\r\n    default:\r\n      console.log('defa', method, query);\r\n      return res.status(405).end(`Method ${method} Not Allowed`);\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}