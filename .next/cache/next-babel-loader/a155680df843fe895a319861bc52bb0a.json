{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport { API_KEY, BASE_URL } from '../context/types';\n\nvar movieDB = function movieDB(url) {\n  var query,\n      method,\n      type,\n      _ref,\n      data,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function movieDB$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n          method = _args.length > 2 && _args[2] !== undefined ? _args[2] : 'get';\n          type = {\n            movie: {\n              details: \"/movie/\".concat(id),\n              accStates: \"/movie/\".concat(id, \"/account_states\"),\n              alterTitles: \"/movie/\".concat(id, \"/alternative_titles\"),\n              changes: \"/movie/\".concat(id, \"/changes\"),\n              credits: \"/movie/\".concat(id, \"/credits\"),\n              externalId: \"/movie/\".concat(id, \"/external_ids\"),\n              images: \"/movie/\".concat(id, \"/images\"),\n              Keywords: \"/movie/\".concat(id, \"/keywords\"),\n              ReleaseDate: \"/movie/\".concat(id, \"/release_dates\"),\n              videos: \"/movie/\".concat(id, \"/videos\"),\n              translations: \"/movie/\".concat(id, \"/translations\"),\n              recommend: \"/movie/\".concat(id, \"/recommendations\"),\n              similar: \"/movie/\".concat(id, \"/similar\"),\n              reviews: \"/movie/\".concat(id, \"/reviews\"),\n              list: \"/movie/\".concat(id, \"/lists\"),\n              rate: \"/movie/\".concat(id, \"/rating\"),\n              rating: \"/movie/\".concat(id, \"/rating\"),\n              latest: \"/movie/latest\",\n              now_playing: \"/movie/now_playing\",\n              popular: \"/movie/popular\",\n              top_rated: \"/movie/top_rated\",\n              upcoming: \"/movie/upcoming\"\n            }\n          };\n          _context.prev = 3;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(axios[method](\"\".concat(BASE_URL).concat(url, \"?\").concat(API_KEY, \"&language=en-US\").concat(query == '' ? '' : \"&\".concat(query))));\n\n        case 6:\n          _ref = _context.sent;\n          data = _ref.data;\n          return _context.abrupt(\"return\", data);\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](3);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\", {\n            error: 'sorry something went wrong'\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 11]]);\n};\n\nexport default movieDB;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/components/utility/movieDB.js"],"names":["axios","API_KEY","BASE_URL","movieDB","url","query","method","type","movie","details","id","accStates","alterTitles","changes","credits","externalId","images","Keywords","ReleaseDate","videos","translations","recommend","similar","reviews","list","rate","rating","latest","now_playing","popular","top_rated","upcoming","data","console","log","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,kBAAlC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,KAAZ,2DAAoB,EAApB;AAAwBC,UAAAA,MAAxB,2DAAiC,KAAjC;AACRC,UAAAA,IADQ,GACD;AACXC,YAAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,mBAAYC,EAAZ,CADF;AAELC,cAAAA,SAAS,mBAAYD,EAAZ,oBAFJ;AAGLE,cAAAA,WAAW,mBAAYF,EAAZ,wBAHN;AAILG,cAAAA,OAAO,mBAAYH,EAAZ,aAJF;AAKLI,cAAAA,OAAO,mBAAYJ,EAAZ,aALF;AAMLK,cAAAA,UAAU,mBAAYL,EAAZ,kBANL;AAOLM,cAAAA,MAAM,mBAAYN,EAAZ,YAPD;AAQLO,cAAAA,QAAQ,mBAAYP,EAAZ,cARH;AASLQ,cAAAA,WAAW,mBAAYR,EAAZ,mBATN;AAULS,cAAAA,MAAM,mBAAYT,EAAZ,YAVD;AAWLU,cAAAA,YAAY,mBAAYV,EAAZ,kBAXP;AAYLW,cAAAA,SAAS,mBAAYX,EAAZ,qBAZJ;AAaLY,cAAAA,OAAO,mBAAYZ,EAAZ,aAbF;AAcLa,cAAAA,OAAO,mBAAYb,EAAZ,aAdF;AAeLc,cAAAA,IAAI,mBAAYd,EAAZ,WAfC;AAgBLe,cAAAA,IAAI,mBAAYf,EAAZ,YAhBC;AAiBLgB,cAAAA,MAAM,mBAAYhB,EAAZ,YAjBD;AAkBLiB,cAAAA,MAAM,iBAlBD;AAmBLC,cAAAA,WAAW,sBAnBN;AAoBLC,cAAAA,OAAO,kBApBF;AAqBLC,cAAAA,SAAS,oBArBJ;AAsBLC,cAAAA,QAAQ;AAtBH;AADI,WADC;AAAA;AAAA;AAAA,2CA6BW/B,KAAK,CAACM,MAAD,CAAL,WAClBJ,QADkB,SACPE,GADO,cACAH,OADA,4BAEnBI,KAAK,IAAI,EAAT,GAAc,EAAd,cAAuBA,KAAvB,CAFmB,EA7BX;;AAAA;AAAA;AA6BJ2B,UAAAA,IA7BI,QA6BJA,IA7BI;AAAA,2CAkCLA,IAlCK;;AAAA;AAAA;AAAA;AAoCZC,UAAAA,OAAO,CAACC,GAAR;AApCY,2CAqCL;AACLC,YAAAA,KAAK,EAAE;AADF,WArCK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AA2CA,eAAehC,OAAf","sourcesContent":["import axios from 'axios';\r\nimport { API_KEY, BASE_URL } from '../context/types';\r\n\r\nconst movieDB = async (url, query = '', method = 'get') => {\r\n  const type = {\r\n    movie: {\r\n      details: `/movie/${id}`,\r\n      accStates: `/movie/${id}/account_states`,\r\n      alterTitles: `/movie/${id}/alternative_titles`,\r\n      changes: `/movie/${id}/changes`,\r\n      credits: `/movie/${id}/credits`,\r\n      externalId: `/movie/${id}/external_ids`,\r\n      images: `/movie/${id}/images`,\r\n      Keywords: `/movie/${id}/keywords`,\r\n      ReleaseDate: `/movie/${id}/release_dates`,\r\n      videos: `/movie/${id}/videos`,\r\n      translations: `/movie/${id}/translations`,\r\n      recommend: `/movie/${id}/recommendations`,\r\n      similar: `/movie/${id}/similar`,\r\n      reviews: `/movie/${id}/reviews`,\r\n      list: `/movie/${id}/lists`,\r\n      rate: `/movie/${id}/rating`,\r\n      rating: `/movie/${id}/rating`,\r\n      latest: `/movie/latest`,\r\n      now_playing: `/movie/now_playing`,\r\n      popular: `/movie/popular`,\r\n      top_rated: `/movie/top_rated`,\r\n      upcoming: `/movie/upcoming`\r\n    }\r\n  };\r\n\r\n  try {\r\n    const { data } = await axios[method](\r\n      `${BASE_URL}${url}?${API_KEY}&language=en-US${\r\n        query == '' ? '' : `&${query}`\r\n      }`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return {\r\n      error: 'sorry something went wrong'\r\n    };\r\n  }\r\n};\r\n\r\nexport default movieDB;\r\n"]},"metadata":{},"sourceType":"module"}