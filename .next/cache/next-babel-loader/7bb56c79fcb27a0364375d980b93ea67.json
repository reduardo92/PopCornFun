{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eduardo Rivas\\\\Desktop\\\\react_Study\\\\popcornFun\\\\pages\\\\movie\\\\[id].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { IMG_URL_OR, SET_MEDIADATA, CLEAR_MEDIADATA } from '../../components/context/types';\nimport TopBilledCast from '../../components/ui/TopBilledCast';\nimport ReviewSection from '../../components/ui/ReviewSection';\nimport MediaSection from '../../components/ui/MediaSection';\nimport Layout from '../../components/layout';\nimport ProfileHeader from '../../components/ui/mediaProfile/ProfileHeader';\nimport RecommenSection from '../../components/ui/RecommenSection';\nimport ProfileStats from '../../components/ui/mediaProfile/ProfileStats/ProfileStats';\nimport MovieContext from '../../components/context/MovieContext';\nvar Styled = styled.section.withConfig({\n  displayName: \"id__Styled\",\n  componentId: \"zlmctg-0\"\n})([\"background:var(--bg-gradient);margin-top:110px;.profile--backdrop{background:linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,0.2)),url(\", \") no-repeat center;background-color:black;min-height:400px;background-size:cover;background-position:top;object-fit:cover;position:relative;&__img{position:absolute;bottom:-20vw;left:20px;width:120px;}}.profile--header{position:relative;padding:2em 0.5em;max-width:750px;margin:0 auto;}@media screen and (min-width:768px){.profile--header{max-width:1100px;padding:2em 1em;}}\"], function (_ref) {\n  var bgImg = _ref.bgImg;\n  return \"\".concat(IMG_URL_OR).concat(bgImg);\n});\n\nvar MovieProfile = function MovieProfile(_ref2) {\n  var movie = _ref2.movie;\n\n  var _useContext = useContext(MovieContext),\n      setData = _useContext.setData,\n      clearData = _useContext.clearData,\n      mediaProfile = _useContext.mediaProfile;\n\n  useEffect(function () {\n    setData(SET_MEDIADATA, movie);\n    return function () {\n      clearData(CLEAR_MEDIADATA);\n    };\n  }, [movie]); // console.log('from mediaProfile', mediaProfile);\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Styled, {\n    className: \"profile\",\n    bgImg: movie.backdrop_path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"profile--backdrop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"profile--header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(ProfileHeader, {\n    data: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), __jsx(TopBilledCast, {\n    data: movie.credits.cast,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(ReviewSection, {\n    data: movie.reviews.results,\n    movieId: movie.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(MediaSection, {\n    videos: movie.videos.results,\n    posters: movie.images.posters,\n    backdrops: movie.images.backdrops,\n    typeId: movie.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(RecommenSection, {\n    data: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), __jsx(ProfileStats, {\n    data: movie,\n    keywords: Object.values(movie.keywords)[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n}; // MovieProfile.getInitialProps = async ctx => {\n//   console.log(ctx.query, 'ID');\n//   console.log(ctx);\n//   try {\n//     const movie = await movieDB(\n//       `movie/${ctx.query.id || '454626'}`,\n//       'append_to_response=account_states,external_ids,keywords,release_dates,videos,recommendations,reviews,credits,images&include_image_language=en,null'\n//     );\n//     return {\n//       movie: { typeFor: 'movie', ...movie }\n//     };\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n\nexport var __N_SSP = true;\nexport default MovieProfile;","map":{"version":3,"sources":["C:/Users/Eduardo Rivas/Desktop/react_Study/popcornFun/pages/movie/[id].jsx"],"names":["useEffect","useContext","styled","IMG_URL_OR","SET_MEDIADATA","CLEAR_MEDIADATA","TopBilledCast","ReviewSection","MediaSection","Layout","ProfileHeader","RecommenSection","ProfileStats","MovieContext","Styled","section","bgImg","MovieProfile","movie","setData","clearData","mediaProfile","backdrop_path","credits","cast","reviews","results","id","videos","images","posters","backdrops","Object","values","keywords"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport movieDB from '../../components/utility/movieDB';\r\nimport {\r\n  IMG_URL_OR,\r\n  SET_MEDIADATA,\r\n  CLEAR_MEDIADATA\r\n} from '../../components/context/types';\r\nimport TopBilledCast from '../../components/ui/TopBilledCast';\r\nimport ReviewSection from '../../components/ui/ReviewSection';\r\nimport MediaSection from '../../components/ui/MediaSection';\r\nimport Layout from '../../components/layout';\r\nimport ProfileHeader from '../../components/ui/mediaProfile/ProfileHeader';\r\nimport RecommenSection from '../../components/ui/RecommenSection';\r\nimport ProfileStats from '../../components/ui/mediaProfile/ProfileStats/ProfileStats';\r\nimport MovieContext from '../../components/context/MovieContext';\r\n\r\nconst Styled = styled.section`\r\n  background: var(--bg-gradient);\r\n  margin-top: 110px;\r\n\r\n  .profile--backdrop {\r\n    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)),\r\n      url(${({ bgImg }) => `${IMG_URL_OR}${bgImg}`}) no-repeat center;\r\n    background-color: black;\r\n    min-height: 400px;\r\n    background-size: cover;\r\n    background-position: top;\r\n    object-fit: cover;\r\n    position: relative;\r\n\r\n    &__img {\r\n      position: absolute;\r\n      bottom: -20vw;\r\n      left: 20px;\r\n      width: 120px;\r\n    }\r\n  }\r\n\r\n  .profile--header {\r\n    position: relative;\r\n    padding: 2em 0.5em;\r\n    max-width: 750px;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    .profile--header {\r\n      max-width: 1100px;\r\n      padding: 2em 1em;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MovieProfile = ({ movie }) => {\r\n  const { setData, clearData, mediaProfile } = useContext(MovieContext);\r\n\r\n  useEffect(() => {\r\n    setData(SET_MEDIADATA, movie);\r\n    return () => {\r\n      clearData(CLEAR_MEDIADATA);\r\n    };\r\n  }, [movie]);\r\n\r\n  // console.log('from mediaProfile', mediaProfile);\r\n\r\n  return (\r\n    <Layout>\r\n      <Styled className='profile' bgImg={movie.backdrop_path}>\r\n        <div className='profile--backdrop' />\r\n        <div className='profile--header'>\r\n          <ProfileHeader data={movie} />\r\n          <TopBilledCast data={movie.credits.cast} />\r\n          <ReviewSection data={movie.reviews.results} movieId={movie.id} />\r\n          <MediaSection\r\n            videos={movie.videos.results}\r\n            posters={movie.images.posters}\r\n            backdrops={movie.images.backdrops}\r\n            typeId={movie.id}\r\n          />\r\n          <RecommenSection data={movie} />\r\n        </div>\r\n        <ProfileStats\r\n          data={movie}\r\n          keywords={Object.values(movie.keywords)[0]}\r\n        />\r\n      </Styled>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// MovieProfile.getInitialProps = async ctx => {\r\n//   console.log(ctx.query, 'ID');\r\n//   console.log(ctx);\r\n\r\n//   try {\r\n//     const movie = await movieDB(\r\n//       `movie/${ctx.query.id || '454626'}`,\r\n//       'append_to_response=account_states,external_ids,keywords,release_dates,videos,recommendations,reviews,credits,images&include_image_language=en,null'\r\n//     );\r\n//     return {\r\n//       movie: { typeFor: 'movie', ...movie }\r\n//     };\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\nexport async function getServerSideProps(ctx) {\r\n  // Fetch data from external API\r\n  try {\r\n    const movie = await movieDB(\r\n      `movie/${ctx.query.id || '454626'}`,\r\n      'append_to_response=account_states,external_ids,keywords,release_dates,videos,recommendations,reviews,credits,images&include_image_language=en,null'\r\n    );\r\n    return {\r\n      props: {\r\n        movie: { typeFor: 'movie', ...movie }\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport default MovieProfile;\r\n"]},"metadata":{},"sourceType":"module"}