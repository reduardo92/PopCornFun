{"version":3,"file":"static/webpack/static\\development\\pages\\tv\\[id].js.7bd4ea616380fcb26bea.hot-update.js","sources":["webpack:///./components/ui/mediaProfile/ProfileStats/Facts.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport timeConvert from '../../../utility/timeConvert';\r\nimport numberWithCommas from '../../../utility/numberWithCommas';\r\nimport setDateFormat from '../../../utility/setDateFormat';\r\nimport { TiWorld } from 'react-icons/ti';\r\nimport Link from 'next/link';\r\nimport { IMG_URL } from '../../../context/types';\r\n\r\nconst Styled = styled.div`\r\n  .stat {\r\n    text-transform: capitalize;\r\n    margin-bottom: 0.7em;\r\n  }\r\n\r\n  .stat--title {\r\n    font-size: 0.9rem;\r\n    font-weight: bold;\r\n    margin-bottom: 0.1em;\r\n  }\r\n\r\n  .release--content {\r\n    display: grid;\r\n    grid-row-gap: 1em;\r\n\r\n    & > :first-child {\r\n      margin-top: 0.5em;\r\n    }\r\n  }\r\n\r\n  .release--date,\r\n  .certification {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: start;\r\n\r\n    & > :first-child {\r\n      margin-right: 0.5em;\r\n    }\r\n  }\r\n\r\n  .world {\r\n    font-size: 1.5rem;\r\n\r\n    path {\r\n      color: #535353;\r\n    }\r\n  }\r\n\r\n  .rate {\r\n    border-radius: 2px;\r\n    background-color: var(--primary-clr);\r\n    color: #fff;\r\n    padding: 0.15em 0.5em;\r\n    font-size: 0.8rem;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  .network--logo {\r\n    width: 60px;\r\n  }\r\n`;\r\n\r\nconst Facts = ({ data }) => {\r\n  const getReleaseType = {\r\n    1: 'Premiere',\r\n    2: 'Theatrical (limited)',\r\n    3: 'Theatrical',\r\n    4: 'Digital',\r\n    5: 'Physical',\r\n    6: 'Tv'\r\n  };\r\n\r\n  // const release = data.r\r\n  //   <>\r\n\r\n  //   </>\r\n\r\n  const networks =\r\n    data.typeFor === 'tv' &&\r\n    data.networks.map(netWork => (\r\n      <Link key={netWork.id} href='/network/[id]' as={`/network/${netWork.id}`}>\r\n        <img\r\n          className='network--logo'\r\n          src={`${IMG_URL}${netWork.logo_path}`}\r\n          alt={netWork.name}\r\n        />\r\n      </Link>\r\n    ));\r\n  return (\r\n    <Styled className='profile--stats--facts'>\r\n      <h3 className='title'>Facts</h3>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Status</p>\r\n        <span className='stat--subtext'>{data.status}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>\r\n          {data.release_dates ? 'Release Information' : 'Networks'}\r\n        </p>\r\n        <ul className='release--content'>\r\n          {networks}\r\n          {data.typeFor === 'tv' && (\r\n            <p className='stat--title'>Certification</p>\r\n          )}\r\n          {data.release_dates.results\r\n            .filter(item => item.iso_3166_1 === 'US')[0]\r\n            .release_dates.map((item, i) => (\r\n              <li key={i}>\r\n                <div className='release--date'>\r\n                  <TiWorld className='world' />\r\n                  <span className='stat--subtext'>\r\n                    {setDateFormat(item.release_date.slice(0, 10))}\r\n                  </span>\r\n                </div>\r\n                <div className='certification'>\r\n                  <span className='rate'>{item.certification}</span>\r\n                  <span className='stat--subtext'>\r\n                    {getReleaseType[item.type]}\r\n                  </span>\r\n                </div>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n      {data.typeFor === 'tv' && (\r\n        <div className='stat'>\r\n          <p className='stat--title'>Type</p>\r\n          <span className='stat--subtext'>{data.type}</span>\r\n        </div>\r\n      )}\r\n      <div className='stat'>\r\n        <p className='stat--title'>Original Language</p>\r\n        <span className='stat--subtext'>{data.original_language}</span>\r\n      </div>\r\n      <div className='stat'>\r\n        <p className='stat--title'>Runtime</p>\r\n        <span className='stat--subtext'>\r\n          {timeConvert(data.runtime || data.episode_run_time[0])}\r\n        </span>\r\n      </div>\r\n      {data.typeFor === 'tv' ? null : (\r\n        <>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Budget</p>\r\n            <span className='stat--subtext'>\r\n              {data.budget === 0 ? 'N/A' : `$${numberWithCommas(data.budget)}`}\r\n            </span>\r\n          </div>\r\n          <div className='stat'>\r\n            <p className='stat--title'>Revenue</p>\r\n            <span className='stat--subtext'>\r\n              {data.revenue === 0\r\n                ? 'N/A'\r\n                : `$${numberWithCommas(data.revenue)}`}\r\n            </span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Styled>\r\n  );\r\n};\r\n\r\nexport default Facts;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAqmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}